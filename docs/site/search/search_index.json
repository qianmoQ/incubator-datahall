{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"\u4e3b\u9875"},{"location":"ClickHouse/2021-08-25-get-started/","text":"\u672c\u6587\u7ae0\u4e3b\u8981\u8bb2\u89e3\u4e00\u5957ClickHouse\u7cfb\u7edf\u7684\u5b89\u88c5\u548c\u90e8\u7f72. \u57fa\u672c\u914d\u7f6e\u73af\u5883 \u00b6 \u4f9d\u8d56 \u7248\u672c ClickHouse 20.11.3.3-2 CentOS 7.x Gcc 4.8.5 \u4e0b\u8f7d\u5b89\u88c5ClickHouse \u00b6 \u79bb\u7ebf\u5b89\u88c5\u65b9\u5f0f(\u6211\u4eec\u4f7f\u7528\u4e0b\u8f7d\u5230\u672c\u5730\u8fdb\u884c\u5b89\u88c5) wget https://repo.yandex.ru/clickhouse/rpm/stable/x86_64/clickhouse-client-20.11.3.3-2.noarch.rpm wget https://repo.yandex.ru/clickhouse/rpm/stable/x86_64/clickhouse-common-static-20.11.3.3-2.x86_64.rpm wget https://repo.yandex.ru/clickhouse/rpm/stable/x86_64/clickhouse-common-static-dbg-20.11.3.3-2.x86_64.rpm wget https://repo.yandex.ru/clickhouse/rpm/stable/x86_64/clickhouse-server-20.11.3.3-2.noarch.rpm yum install -y clickhouse-* yum\u6e90\u5728\u7ebf\u5b89\u88c5 sudo yum install yum-utils sudo rpm --import https://repo.clickhouse.tech/CLICKHOUSE-KEY.GPG sudo yum-config-manager --add-repo https://repo.clickhouse.tech/rpm/stable/x86_64 sudo yum install clickhouse-server clickhouse-client \u5982\u679c\u60a8\u60f3\u4f7f\u7528\u6700\u65b0\u7248\u672c\uff0c\u8bf7\u5c06stable\u66ff\u6362\u4e3atesting\uff08\u5efa\u8bae\u60a8\u5728\u6d4b\u8bd5\u73af\u5883\u4e2d\u4f7f\u7528\uff09 \u914d\u7f6eClickHouse \u00b6 ClickHouse\u4e2d\u7684\u914d\u7f6e\u9879\u5f88\u591a\uff0c\u9ed8\u8ba4\u4f1a\u5728 /etc \u4e0b\u751f\u6210 clickhouse-server \u548c clickhouse-client \u4e24\u4e2a\u76ee\u5f55\uff0c\u7531\u4e8e\u6211\u4eec\u5b89\u88c5\u670d\u52a1\u6211\u4eec\u53bb\u4fee\u6539 clickhouse-server \u4e0b\u7684\u914d\u7f6e\u6587\u4ef6 \u4fee\u6539 /etc/clickhouse-server/config.xml <?xml version=\"1.0\"?> <!-- NOTE: User and query level settings are set up in \"users.xml\" file. --> <yandex> <logger> <!-- Possible levels: https://github.com/pocoproject/poco/blob/develop/Foundation/include/Poco/Logger.h#L105 --> <level> trace </level> <log> /data2/clickhouse/clickhouse-server.log </log> <errorlog> /data2/clickhouse/clickhouse-server.err.log </errorlog> <size> 1000M </size> <count> 10 </count> <!-- <console>1</console> --> <!-- Default behavior is autodetection (log to console if not daemon mode and is tty) --> </logger> <!--display_name>production</display_name--> <!-- It is the name that will be shown in the client --> <http_port> 9123 </http_port> <tcp_port> 9000 </tcp_port> <!-- For HTTPS and SSL over native protocol. --> <!-- <https_port>8443</https_port> <tcp_port_secure>9440</tcp_port_secure> --> <!-- Used with https_port and tcp_port_secure. Full ssl options list: https://github.com/ClickHouse-Extras/poco/blob/master/NetSSL_OpenSSL/include/Poco/Net/SSLManager.h#L71 --> <openSSL> <server> <!-- Used for https server AND secure tcp port --> <!-- openssl req -subj \"/CN=localhost\" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt --> <certificateFile> /etc/clickhouse-server/server.crt </certificateFile> <privateKeyFile> /etc/clickhouse-server/server.key </privateKeyFile> <!-- openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096 --> <dhParamsFile> /etc/clickhouse-server/dhparam.pem </dhParamsFile> <verificationMode> none </verificationMode> <loadDefaultCAFile> true </loadDefaultCAFile> <cacheSessions> true </cacheSessions> <disableProtocols> sslv2,sslv3 </disableProtocols> <preferServerCiphers> true </preferServerCiphers> </server> <client> <!-- Used for connecting to https dictionary source --> <loadDefaultCAFile> true </loadDefaultCAFile> <cacheSessions> true </cacheSessions> <disableProtocols> sslv2,sslv3 </disableProtocols> <preferServerCiphers> true </preferServerCiphers> <!-- Use for self-signed: <verificationMode>none</verificationMode> --> <invalidCertificateHandler> <!-- Use for self-signed: <name>AcceptCertificateHandler</name> --> <name> RejectCertificateHandler </name> </invalidCertificateHandler> </client> </openSSL> <!-- Default root page on http[s] server. For example load UI from https://tabix.io/ when opening http://localhost:8123 --> <!-- <http_server_default_response><![CDATA[<html ng-app=\"SMI2\"><head><base href=\"http://ui.tabix.io/\"></head><body><div ui-view=\"\" class=\"content-ui\"></div><script src=\"http://loader.tabix.io/master.js\"></script></body></html>]]></http_server_default_response> --> <!-- Port for communication between replicas. Used for data exchange. --> <interserver_http_port> 9009 </interserver_http_port> <listen_host> 0.0.0.0 </listen_host> <!-- Don't exit if ipv6 or ipv4 unavailable, but listen_host with this protocol specified --> <!-- <listen_try>0</listen_try> --> <!-- Allow listen on same address:port --> <!-- <listen_reuse_port>0</listen_reuse_port> --> <!-- <listen_backlog>64</listen_backlog> --> <max_connections> 4096 </max_connections> <keep_alive_timeout> 3 </keep_alive_timeout> <!-- Maximum number of concurrent queries. --> <max_concurrent_queries> 100 </max_concurrent_queries> <!-- Set limit on number of open files (default: maximum). This setting makes sense on Mac OS X because getrlimit() fails to retrieve correct maximum value. --> <!-- <max_open_files>262144</max_open_files> --> <!-- Size of cache of uncompressed blocks of data, used in tables of MergeTree family. In bytes. Cache is single for server. Memory is allocated only on demand. Cache is used when 'use_uncompressed_cache' user setting turned on (off by default). Uncompressed cache is advantageous only for very short queries and in rare cases. --> <uncompressed_cache_size> 8589934592 </uncompressed_cache_size> <!-- Approximate size of mark cache, used in tables of MergeTree family. In bytes. Cache is single for server. Memory is allocated only on demand. You should not lower this value. --> <mark_cache_size> 5368709120 </mark_cache_size> <!-- Path to data directory, with trailing slash. --> <path> /data2/clickhouse/data/ </path> <!-- Path to temporary data for processing hard queries. --> <tmp_path> /data2/clickhouse/tmp/ </tmp_path> <!-- Directory with user provided files that are accessible by 'file' table function. --> <user_files_path> /data2/clickhouse/user_files/ </user_files_path> <!-- Path to configuration file with users, access rights, profiles of settings, quotas. --> <users_config> users.xml </users_config> <!-- Default profile of settings. --> <default_profile> default </default_profile> <!-- System profile of settings. This settings are used by internal processes (Buffer storage, Distibuted DDL worker and so on). --> <!-- <system_profile>default</system_profile> --> <!-- Default database. --> <default_database> default </default_database> <mlock_executable> false </mlock_executable> <zookeeper incl= \"zookeeper-servers\" optional= \"true\" /> <!-- Substitutions for parameters of replicated tables. Optional. If you don't use replicated tables, you could omit that. See https://clickhouse.yandex/docs/en/table_engines/replication/#creating-replicated-tables --> <macros incl= \"macros\" optional= \"true\" /> <!-- Reloading interval for embedded dictionaries, in seconds. Default: 3600. --> <builtin_dictionaries_reload_interval> 3600 </builtin_dictionaries_reload_interval> <!-- Maximum session timeout, in seconds. Default: 3600. --> <max_session_timeout> 3600 </max_session_timeout> <!-- Default session timeout, in seconds. Default: 60. --> <default_session_timeout> 60 </default_session_timeout> <!-- Query log. Used only for queries with setting log_queries = 1. --> <query_log> <!-- What table to insert data. If table is not exist, it will be created. When query log structure is changed after system update, then old table will be renamed and new table will be created automatically. --> <database> system </database> <table> query_log </table> <!-- PARTITION BY expr https://clickhouse.yandex/docs/en/table_engines/custom_partitioning_key/ Example: event_date toMonday(event_date) toYYYYMM(event_date) toStartOfHour(event_time) --> <partition_by> toYYYYMM(event_date) </partition_by> <!-- Interval of flushing data. --> <flush_interval_milliseconds> 7500 </flush_interval_milliseconds> </query_log> <!-- Trace log. Stores stack traces collected by query profilers. See query_profiler_real_time_period_ns and query_profiler_cpu_time_period_ns settings. --> <trace_log> <database> system </database> <table> trace_log </table> <partition_by> toYYYYMM(event_date) </partition_by> <flush_interval_milliseconds> 7500 </flush_interval_milliseconds> </trace_log> <!-- Query thread log. Has information about all threads participated in query execution. Used only for queries with setting log_query_threads = 1. --> <query_thread_log> <database> system </database> <table> query_thread_log </table> <partition_by> toYYYYMM(event_date) </partition_by> <flush_interval_milliseconds> 7500 </flush_interval_milliseconds> </query_thread_log> <dictionaries_config> *_dictionary.xml </dictionaries_config> <!-- Uncomment if you want data to be compressed 30-100% better. Don't do that if you just started using ClickHouse. --> <compression incl= \"clickhouse_compression\" > </compression> <!-- Allow to execute distributed DDL queries (CREATE, DROP, ALTER, RENAME) on cluster. Works only if ZooKeeper is enabled. Comment it if such functionality isn't required. --> <distributed_ddl> <!-- Path in ZooKeeper to queue with DDL queries --> <path> /a8root/clickhouse/task_queue/ddl </path> <!-- Settings from this profile will be used to execute DDL queries --> <!-- <profile>default</profile> --> </distributed_ddl> <graphite_rollup_example> <pattern> <regexp> click_cost </regexp> <function> any </function> <retention> <age> 0 </age> <precision> 3600 </precision> </retention> <retention> <age> 86400 </age> <precision> 60 </precision> </retention> </pattern> <default> <function> max </function> <retention> <age> 0 </age> <precision> 60 </precision> </retention> <retention> <age> 3600 </age> <precision> 300 </precision> </retention> <retention> <age> 86400 </age> <precision> 3600 </precision> </retention> </default> </graphite_rollup_example> <format_schema_path> /data2/clickhouse/format_schemas/ </format_schema_path> </yandex> \u6211\u4eec\u4e00\u822c\u4fee\u6539\u4ee5\u4e0b\u914d\u7f6e\u9879\uff1a logger \u4fee\u6539\u65e5\u5fd7\u7684\u5b58\u653e\u8def\u5f84 http_port \u4fee\u6539\u6d4f\u89c8\u5668\u8bbf\u95ee\u7684\u7aef\u53e3\uff0c\u9ed8\u8ba4\u4e3a 8123 tcp_port \u4fee\u6539tcp\u534f\u8bae\u7684\u4f20\u8f93\u7aef\u53e3 openSSL \u4e00\u4e9bssl\u7684\u8ba4\u8bc1\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u6682\u65f6\u4e0d\u505assl\u8ba4\u8bc1\uff0c\u6b64\u5904\u4e0d\u505a\u5904\u7406 listen_host \u5982\u679c\u6211\u4eec\u8981\u5bf9\u5916\u4f7f\u7528\u670d\u52a1\u7684\u8bdd\uff0c\u6b64\u5904\u9700\u8981\u4fee\u6539\u6210 0.0.0.0 remote_servers \u6b64\u5904\u662f\u96c6\u7fa4\u76f8\u5173\u7684\u914d\u7f6e\u4fe1\u606f\u540e\u7eed\u4f1a\u8be6\u89e3 \u5176\u4ed6\u81ea\u5b9a\u4e49\u7684\u914d\u7f6e\u53ef\u81ea\u884c\u4fee\u6539\uff0c\u4fee\u6539\u914d\u7f6e\u540e\u6211\u4eec\u4fbf\u53ef\u4ee5\u542f\u52a8\u4e00\u4e2a\u672c\u5730\u7684ClickHouse\u670d\u52a1 \u521b\u5efa\u76f8\u5173\u76ee\u5f55\u53ca\u6743\u9650 mkdir -p /data2/clickhouse chown -R clickhouse:clickhouse /data2/clickhouse \u64cd\u4f5cClickHouse \u00b6 \u542f\u52a8\u670d\u52a1 sudo -u clickhouse clickhouse-server --daemon --pid-file = /var/run/clickhouse-server/clickhouse-server.pid --config-file = /etc/clickhouse-server/config.xml --daemon \u6807\u5fd7\u6211\u4eec\u8981\u540e\u53f0\u542f\u52a8\u670d\u52a1 --pid-file \u6307\u5b9a\u670d\u52a1\u542f\u52a8\u540e\u7684\u8fdb\u884c\u6587\u4ef6\u8def\u5f84 --config-file \u6307\u5b9a\u670d\u52a1\u542f\u52a8\u7684\u914d\u7f6e\u6587\u4ef6 \u5982\u679c\u6211\u4eec\u4f7f\u7528\u8c03\u8bd5\u53ef\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4 sudo -u clickhouse clickhouse-server start \u8981\u7528\u5355\u72ec\u7684\u7528\u6237\u542f\u52a8\uff0c\u5982\u679c\u4f7f\u7528root\u542f\u52a8\u7684\u8bdd\u7cfb\u7edf\u4f1a\u505a\u63d0\u793a\u4fe1\u606f \u8c03\u8bd5ClickHouse\u670d\u52a1 \u00b6 ClickHouse\u5b89\u88c5\u5b8c\u6210\u540e\u4f1a\u751f\u6210 clickhouse-server \u548c clickhouse-client \u4e24\u4e2a\u76ee\u5f55\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u4f7f\u7528 clickhouse-client \u53bb\u6d4b\u8bd5\u670d\u52a1 clickhouse-client -h clickhouse --port 9000 --multiquery --query = \"show databases\" \u6ce8\u610f\uff1a--port\u6307\u5b9a\u7684\u662ftcp\u7684\u7aef\u53e3 \u8fd0\u884c\u67e5\u8be2\u6570\u636e\u5e93\u5217\u8868\u8fd4\u56de\u7c7b\u4f3c\u4ee5\u4e0b\u4fe1\u606f _temporary_and_external_tables default system \u6b64\u8bed\u6cd5\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2aSQL\u6309\u7167\u82f1\u6587 ; \u5206\u5272\u6bcf\u4e2aSQL\u5373\u53ef \u66f4\u591aclickhouse-client\u4fe1\u606f\u4f7f\u7528clickhouse-client --help\u67e5\u770b","title":"ClickHouse\u5b89\u88c5\u90e8\u7f72"},{"location":"ClickHouse/2021-08-25-get-started/#_1","text":"\u4f9d\u8d56 \u7248\u672c ClickHouse 20.11.3.3-2 CentOS 7.x Gcc 4.8.5","title":"\u57fa\u672c\u914d\u7f6e\u73af\u5883"},{"location":"ClickHouse/2021-08-25-get-started/#clickhouse","text":"\u79bb\u7ebf\u5b89\u88c5\u65b9\u5f0f(\u6211\u4eec\u4f7f\u7528\u4e0b\u8f7d\u5230\u672c\u5730\u8fdb\u884c\u5b89\u88c5) wget https://repo.yandex.ru/clickhouse/rpm/stable/x86_64/clickhouse-client-20.11.3.3-2.noarch.rpm wget https://repo.yandex.ru/clickhouse/rpm/stable/x86_64/clickhouse-common-static-20.11.3.3-2.x86_64.rpm wget https://repo.yandex.ru/clickhouse/rpm/stable/x86_64/clickhouse-common-static-dbg-20.11.3.3-2.x86_64.rpm wget https://repo.yandex.ru/clickhouse/rpm/stable/x86_64/clickhouse-server-20.11.3.3-2.noarch.rpm yum install -y clickhouse-* yum\u6e90\u5728\u7ebf\u5b89\u88c5 sudo yum install yum-utils sudo rpm --import https://repo.clickhouse.tech/CLICKHOUSE-KEY.GPG sudo yum-config-manager --add-repo https://repo.clickhouse.tech/rpm/stable/x86_64 sudo yum install clickhouse-server clickhouse-client \u5982\u679c\u60a8\u60f3\u4f7f\u7528\u6700\u65b0\u7248\u672c\uff0c\u8bf7\u5c06stable\u66ff\u6362\u4e3atesting\uff08\u5efa\u8bae\u60a8\u5728\u6d4b\u8bd5\u73af\u5883\u4e2d\u4f7f\u7528\uff09","title":"\u4e0b\u8f7d\u5b89\u88c5ClickHouse"},{"location":"ClickHouse/2021-08-25-get-started/#clickhouse_1","text":"ClickHouse\u4e2d\u7684\u914d\u7f6e\u9879\u5f88\u591a\uff0c\u9ed8\u8ba4\u4f1a\u5728 /etc \u4e0b\u751f\u6210 clickhouse-server \u548c clickhouse-client \u4e24\u4e2a\u76ee\u5f55\uff0c\u7531\u4e8e\u6211\u4eec\u5b89\u88c5\u670d\u52a1\u6211\u4eec\u53bb\u4fee\u6539 clickhouse-server \u4e0b\u7684\u914d\u7f6e\u6587\u4ef6 \u4fee\u6539 /etc/clickhouse-server/config.xml <?xml version=\"1.0\"?> <!-- NOTE: User and query level settings are set up in \"users.xml\" file. --> <yandex> <logger> <!-- Possible levels: https://github.com/pocoproject/poco/blob/develop/Foundation/include/Poco/Logger.h#L105 --> <level> trace </level> <log> /data2/clickhouse/clickhouse-server.log </log> <errorlog> /data2/clickhouse/clickhouse-server.err.log </errorlog> <size> 1000M </size> <count> 10 </count> <!-- <console>1</console> --> <!-- Default behavior is autodetection (log to console if not daemon mode and is tty) --> </logger> <!--display_name>production</display_name--> <!-- It is the name that will be shown in the client --> <http_port> 9123 </http_port> <tcp_port> 9000 </tcp_port> <!-- For HTTPS and SSL over native protocol. --> <!-- <https_port>8443</https_port> <tcp_port_secure>9440</tcp_port_secure> --> <!-- Used with https_port and tcp_port_secure. Full ssl options list: https://github.com/ClickHouse-Extras/poco/blob/master/NetSSL_OpenSSL/include/Poco/Net/SSLManager.h#L71 --> <openSSL> <server> <!-- Used for https server AND secure tcp port --> <!-- openssl req -subj \"/CN=localhost\" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt --> <certificateFile> /etc/clickhouse-server/server.crt </certificateFile> <privateKeyFile> /etc/clickhouse-server/server.key </privateKeyFile> <!-- openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096 --> <dhParamsFile> /etc/clickhouse-server/dhparam.pem </dhParamsFile> <verificationMode> none </verificationMode> <loadDefaultCAFile> true </loadDefaultCAFile> <cacheSessions> true </cacheSessions> <disableProtocols> sslv2,sslv3 </disableProtocols> <preferServerCiphers> true </preferServerCiphers> </server> <client> <!-- Used for connecting to https dictionary source --> <loadDefaultCAFile> true </loadDefaultCAFile> <cacheSessions> true </cacheSessions> <disableProtocols> sslv2,sslv3 </disableProtocols> <preferServerCiphers> true </preferServerCiphers> <!-- Use for self-signed: <verificationMode>none</verificationMode> --> <invalidCertificateHandler> <!-- Use for self-signed: <name>AcceptCertificateHandler</name> --> <name> RejectCertificateHandler </name> </invalidCertificateHandler> </client> </openSSL> <!-- Default root page on http[s] server. For example load UI from https://tabix.io/ when opening http://localhost:8123 --> <!-- <http_server_default_response><![CDATA[<html ng-app=\"SMI2\"><head><base href=\"http://ui.tabix.io/\"></head><body><div ui-view=\"\" class=\"content-ui\"></div><script src=\"http://loader.tabix.io/master.js\"></script></body></html>]]></http_server_default_response> --> <!-- Port for communication between replicas. Used for data exchange. --> <interserver_http_port> 9009 </interserver_http_port> <listen_host> 0.0.0.0 </listen_host> <!-- Don't exit if ipv6 or ipv4 unavailable, but listen_host with this protocol specified --> <!-- <listen_try>0</listen_try> --> <!-- Allow listen on same address:port --> <!-- <listen_reuse_port>0</listen_reuse_port> --> <!-- <listen_backlog>64</listen_backlog> --> <max_connections> 4096 </max_connections> <keep_alive_timeout> 3 </keep_alive_timeout> <!-- Maximum number of concurrent queries. --> <max_concurrent_queries> 100 </max_concurrent_queries> <!-- Set limit on number of open files (default: maximum). This setting makes sense on Mac OS X because getrlimit() fails to retrieve correct maximum value. --> <!-- <max_open_files>262144</max_open_files> --> <!-- Size of cache of uncompressed blocks of data, used in tables of MergeTree family. In bytes. Cache is single for server. Memory is allocated only on demand. Cache is used when 'use_uncompressed_cache' user setting turned on (off by default). Uncompressed cache is advantageous only for very short queries and in rare cases. --> <uncompressed_cache_size> 8589934592 </uncompressed_cache_size> <!-- Approximate size of mark cache, used in tables of MergeTree family. In bytes. Cache is single for server. Memory is allocated only on demand. You should not lower this value. --> <mark_cache_size> 5368709120 </mark_cache_size> <!-- Path to data directory, with trailing slash. --> <path> /data2/clickhouse/data/ </path> <!-- Path to temporary data for processing hard queries. --> <tmp_path> /data2/clickhouse/tmp/ </tmp_path> <!-- Directory with user provided files that are accessible by 'file' table function. --> <user_files_path> /data2/clickhouse/user_files/ </user_files_path> <!-- Path to configuration file with users, access rights, profiles of settings, quotas. --> <users_config> users.xml </users_config> <!-- Default profile of settings. --> <default_profile> default </default_profile> <!-- System profile of settings. This settings are used by internal processes (Buffer storage, Distibuted DDL worker and so on). --> <!-- <system_profile>default</system_profile> --> <!-- Default database. --> <default_database> default </default_database> <mlock_executable> false </mlock_executable> <zookeeper incl= \"zookeeper-servers\" optional= \"true\" /> <!-- Substitutions for parameters of replicated tables. Optional. If you don't use replicated tables, you could omit that. See https://clickhouse.yandex/docs/en/table_engines/replication/#creating-replicated-tables --> <macros incl= \"macros\" optional= \"true\" /> <!-- Reloading interval for embedded dictionaries, in seconds. Default: 3600. --> <builtin_dictionaries_reload_interval> 3600 </builtin_dictionaries_reload_interval> <!-- Maximum session timeout, in seconds. Default: 3600. --> <max_session_timeout> 3600 </max_session_timeout> <!-- Default session timeout, in seconds. Default: 60. --> <default_session_timeout> 60 </default_session_timeout> <!-- Query log. Used only for queries with setting log_queries = 1. --> <query_log> <!-- What table to insert data. If table is not exist, it will be created. When query log structure is changed after system update, then old table will be renamed and new table will be created automatically. --> <database> system </database> <table> query_log </table> <!-- PARTITION BY expr https://clickhouse.yandex/docs/en/table_engines/custom_partitioning_key/ Example: event_date toMonday(event_date) toYYYYMM(event_date) toStartOfHour(event_time) --> <partition_by> toYYYYMM(event_date) </partition_by> <!-- Interval of flushing data. --> <flush_interval_milliseconds> 7500 </flush_interval_milliseconds> </query_log> <!-- Trace log. Stores stack traces collected by query profilers. See query_profiler_real_time_period_ns and query_profiler_cpu_time_period_ns settings. --> <trace_log> <database> system </database> <table> trace_log </table> <partition_by> toYYYYMM(event_date) </partition_by> <flush_interval_milliseconds> 7500 </flush_interval_milliseconds> </trace_log> <!-- Query thread log. Has information about all threads participated in query execution. Used only for queries with setting log_query_threads = 1. --> <query_thread_log> <database> system </database> <table> query_thread_log </table> <partition_by> toYYYYMM(event_date) </partition_by> <flush_interval_milliseconds> 7500 </flush_interval_milliseconds> </query_thread_log> <dictionaries_config> *_dictionary.xml </dictionaries_config> <!-- Uncomment if you want data to be compressed 30-100% better. Don't do that if you just started using ClickHouse. --> <compression incl= \"clickhouse_compression\" > </compression> <!-- Allow to execute distributed DDL queries (CREATE, DROP, ALTER, RENAME) on cluster. Works only if ZooKeeper is enabled. Comment it if such functionality isn't required. --> <distributed_ddl> <!-- Path in ZooKeeper to queue with DDL queries --> <path> /a8root/clickhouse/task_queue/ddl </path> <!-- Settings from this profile will be used to execute DDL queries --> <!-- <profile>default</profile> --> </distributed_ddl> <graphite_rollup_example> <pattern> <regexp> click_cost </regexp> <function> any </function> <retention> <age> 0 </age> <precision> 3600 </precision> </retention> <retention> <age> 86400 </age> <precision> 60 </precision> </retention> </pattern> <default> <function> max </function> <retention> <age> 0 </age> <precision> 60 </precision> </retention> <retention> <age> 3600 </age> <precision> 300 </precision> </retention> <retention> <age> 86400 </age> <precision> 3600 </precision> </retention> </default> </graphite_rollup_example> <format_schema_path> /data2/clickhouse/format_schemas/ </format_schema_path> </yandex> \u6211\u4eec\u4e00\u822c\u4fee\u6539\u4ee5\u4e0b\u914d\u7f6e\u9879\uff1a logger \u4fee\u6539\u65e5\u5fd7\u7684\u5b58\u653e\u8def\u5f84 http_port \u4fee\u6539\u6d4f\u89c8\u5668\u8bbf\u95ee\u7684\u7aef\u53e3\uff0c\u9ed8\u8ba4\u4e3a 8123 tcp_port \u4fee\u6539tcp\u534f\u8bae\u7684\u4f20\u8f93\u7aef\u53e3 openSSL \u4e00\u4e9bssl\u7684\u8ba4\u8bc1\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u6682\u65f6\u4e0d\u505assl\u8ba4\u8bc1\uff0c\u6b64\u5904\u4e0d\u505a\u5904\u7406 listen_host \u5982\u679c\u6211\u4eec\u8981\u5bf9\u5916\u4f7f\u7528\u670d\u52a1\u7684\u8bdd\uff0c\u6b64\u5904\u9700\u8981\u4fee\u6539\u6210 0.0.0.0 remote_servers \u6b64\u5904\u662f\u96c6\u7fa4\u76f8\u5173\u7684\u914d\u7f6e\u4fe1\u606f\u540e\u7eed\u4f1a\u8be6\u89e3 \u5176\u4ed6\u81ea\u5b9a\u4e49\u7684\u914d\u7f6e\u53ef\u81ea\u884c\u4fee\u6539\uff0c\u4fee\u6539\u914d\u7f6e\u540e\u6211\u4eec\u4fbf\u53ef\u4ee5\u542f\u52a8\u4e00\u4e2a\u672c\u5730\u7684ClickHouse\u670d\u52a1 \u521b\u5efa\u76f8\u5173\u76ee\u5f55\u53ca\u6743\u9650 mkdir -p /data2/clickhouse chown -R clickhouse:clickhouse /data2/clickhouse","title":"\u914d\u7f6eClickHouse"},{"location":"ClickHouse/2021-08-25-get-started/#clickhouse_2","text":"\u542f\u52a8\u670d\u52a1 sudo -u clickhouse clickhouse-server --daemon --pid-file = /var/run/clickhouse-server/clickhouse-server.pid --config-file = /etc/clickhouse-server/config.xml --daemon \u6807\u5fd7\u6211\u4eec\u8981\u540e\u53f0\u542f\u52a8\u670d\u52a1 --pid-file \u6307\u5b9a\u670d\u52a1\u542f\u52a8\u540e\u7684\u8fdb\u884c\u6587\u4ef6\u8def\u5f84 --config-file \u6307\u5b9a\u670d\u52a1\u542f\u52a8\u7684\u914d\u7f6e\u6587\u4ef6 \u5982\u679c\u6211\u4eec\u4f7f\u7528\u8c03\u8bd5\u53ef\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4 sudo -u clickhouse clickhouse-server start \u8981\u7528\u5355\u72ec\u7684\u7528\u6237\u542f\u52a8\uff0c\u5982\u679c\u4f7f\u7528root\u542f\u52a8\u7684\u8bdd\u7cfb\u7edf\u4f1a\u505a\u63d0\u793a\u4fe1\u606f","title":"\u64cd\u4f5cClickHouse"},{"location":"ClickHouse/2021-08-25-get-started/#clickhouse_3","text":"ClickHouse\u5b89\u88c5\u5b8c\u6210\u540e\u4f1a\u751f\u6210 clickhouse-server \u548c clickhouse-client \u4e24\u4e2a\u76ee\u5f55\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u4f7f\u7528 clickhouse-client \u53bb\u6d4b\u8bd5\u670d\u52a1 clickhouse-client -h clickhouse --port 9000 --multiquery --query = \"show databases\" \u6ce8\u610f\uff1a--port\u6307\u5b9a\u7684\u662ftcp\u7684\u7aef\u53e3 \u8fd0\u884c\u67e5\u8be2\u6570\u636e\u5e93\u5217\u8868\u8fd4\u56de\u7c7b\u4f3c\u4ee5\u4e0b\u4fe1\u606f _temporary_and_external_tables default system \u6b64\u8bed\u6cd5\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2aSQL\u6309\u7167\u82f1\u6587 ; \u5206\u5272\u6bcf\u4e2aSQL\u5373\u53ef \u66f4\u591aclickhouse-client\u4fe1\u606f\u4f7f\u7528clickhouse-client --help\u67e5\u770b","title":"\u8c03\u8bd5ClickHouse\u670d\u52a1"},{"location":"ClickHouse/2021-09-07-get-started-config/","text":"\u6ce8\u610f\uff1a\u6211\u4eec\u9700\u8981\u5728\u6bcf\u53f0\u8282\u70b9\u4e2d\u90e8\u7f72ClickHouse\u90e8\u7f72\u65b9\u5f0f\u8be6\u89c1 ClickHouse\u5b89\u88c5\u90e8\u7f72 \u6211\u4eec\u4e00\u822c\u914d\u7f6eClickHouse\u96c6\u7fa4\u53ea\u9700\u8981\u4fee\u6539Zookeeper\u5b58\u50a8\u548c\u8282\u70b9\u6dfb\u52a0\u5373\u53ef\u3002 \u8282\u70b9\u4fe1\u606f \u00b6 \u4e3b\u673a IP ck1 10.10.0.1 ck2 10.10.0.2 ck3 10.10.0.3 \u914d\u7f6eZookeeper \u00b6 \u5728 /etc/clickhouse-server/config.xml \u6587\u4ef6\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\u4fe1\u606f <zookeeper> <node index= \"1\" > <host> zk1 </host> <port> 2181 </port> </node> <node index= \"2\" > <host> zk2 </host> <port> 2181 </port> </node> <node index= \"3\" > <host> zk3 </host> <port> 2181 </port> </node> </zookeeper> \u6539\u914d\u7f6e\u6587\u4ef6\u4e3b\u8981\u914d\u7f6e\u8fde\u63a5Zookeeper\u7684\u4fe1\u606f\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684index\u4e0d\u53ef\u91cd\u590d \u6ce8\u610f\u8981\u6dfb\u52a0\u5230yandex\u8282\u70b9\u4e2d \u914d\u7f6eClickHouse\u96c6\u7fa4 \u00b6 \u914d\u7f6eClickHouse\u96c6\u7fa4\u8282\u70b9\u9700\u8981\u914d\u7f6e remote_servers \u8282\u70b9 \u5728 /etc/clickhouse-server/config.xml \u6587\u4ef6\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\u4fe1\u606f <remote_servers> <ck_cluster> <shard> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck1 </host> <port> 9000 </port> </replica> <replica> <host> ck2 </host> <port> 9000 </port> </replica> </shard> <shard> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck2 </host> <port> 9000 </port> </replica> <replica> <host> ck3 </host> <port> 9000 </port> </replica> </shard> <shard> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck3 </host> <port> 9000 </port> </replica> <replica> <host> ck1 </host> <port> 9000 </port> </replica> </shard> </ck_cluster> </remote_servers> ck_cluster \u96c6\u7fa4\u6807\u8bc6\uff0c\u53ef\u4ee5\u81ea\u884c\u89c4\u5b9a\uff0c\u5728\u521b\u5efa\u5206\u5e03\u5f0f\u8868\uff08\u5f15\u64ce\u4e3aDistributed\uff09\u65f6\u9700\u8981\u7528\u5230\u3002 weight \u6bcf\u4e2a\u5206\u7247\u7684\u5199\u5165\u6743\u91cd\u503c\uff0c\u6570\u636e\u5199\u5165\u65f6\u4f1a\u6709\u8f83\u5927\u6982\u7387\u843d\u5230weight\u503c\u8f83\u5927\u7684\u5206\u7247\uff0c\u8fd9\u91cc\u5168\u90e8\u8bbe\u4e3a1\u3002 internal_replication \u662f\u5426\u542f\u7528\u5185\u90e8\u590d\u5236\uff0c\u5373\u5199\u5165\u6570\u636e\u65f6\u53ea\u5199\u5165\u5230\u4e00\u4e2a\u526f\u672c\uff0c\u5176\u4ed6\u526f\u672c\u7684\u540c\u6b65\u5de5\u4f5c\u9760\u590d\u5236\u8868\u548cZooKeeper\u5f02\u6b65\u8fdb\u884c\u3002 \u6211\u4eec\u5728shard\u5206\u7247\u4e2d\u8bbe\u7f6e\u7684\u662f\u5faa\u73af\u5206\u7247\u8fd9\u6837\u4fdd\u8bc1\u6211\u4eec\u590d\u5236\u7684\u8282\u70b9\u67d0\u4e00\u4e2a\u5b95\u673a\u540e\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c \u5c06\u914d\u7f6e\u5206\u53d1\u5230\u6240\u6709\u90e8\u7f72ClickHouse\u7684\u8282\u70b9\u4e2d\u8fdb\u884c\u670d\u52a1\u91cd\u542f \u6b64\u65f6\u6211\u4eec\u7684ClickHouse\u96c6\u7fa4\u5df2\u7ecf\u642d\u5efa\u5b8c\u6210\uff01","title":"ClickHouse\u96c6\u7fa4\u914d\u7f6e"},{"location":"ClickHouse/2021-09-07-get-started-config/#_1","text":"\u4e3b\u673a IP ck1 10.10.0.1 ck2 10.10.0.2 ck3 10.10.0.3","title":"\u8282\u70b9\u4fe1\u606f"},{"location":"ClickHouse/2021-09-07-get-started-config/#zookeeper","text":"\u5728 /etc/clickhouse-server/config.xml \u6587\u4ef6\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\u4fe1\u606f <zookeeper> <node index= \"1\" > <host> zk1 </host> <port> 2181 </port> </node> <node index= \"2\" > <host> zk2 </host> <port> 2181 </port> </node> <node index= \"3\" > <host> zk3 </host> <port> 2181 </port> </node> </zookeeper> \u6539\u914d\u7f6e\u6587\u4ef6\u4e3b\u8981\u914d\u7f6e\u8fde\u63a5Zookeeper\u7684\u4fe1\u606f\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684index\u4e0d\u53ef\u91cd\u590d \u6ce8\u610f\u8981\u6dfb\u52a0\u5230yandex\u8282\u70b9\u4e2d","title":"\u914d\u7f6eZookeeper"},{"location":"ClickHouse/2021-09-07-get-started-config/#clickhouse","text":"\u914d\u7f6eClickHouse\u96c6\u7fa4\u8282\u70b9\u9700\u8981\u914d\u7f6e remote_servers \u8282\u70b9 \u5728 /etc/clickhouse-server/config.xml \u6587\u4ef6\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\u4fe1\u606f <remote_servers> <ck_cluster> <shard> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck1 </host> <port> 9000 </port> </replica> <replica> <host> ck2 </host> <port> 9000 </port> </replica> </shard> <shard> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck2 </host> <port> 9000 </port> </replica> <replica> <host> ck3 </host> <port> 9000 </port> </replica> </shard> <shard> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck3 </host> <port> 9000 </port> </replica> <replica> <host> ck1 </host> <port> 9000 </port> </replica> </shard> </ck_cluster> </remote_servers> ck_cluster \u96c6\u7fa4\u6807\u8bc6\uff0c\u53ef\u4ee5\u81ea\u884c\u89c4\u5b9a\uff0c\u5728\u521b\u5efa\u5206\u5e03\u5f0f\u8868\uff08\u5f15\u64ce\u4e3aDistributed\uff09\u65f6\u9700\u8981\u7528\u5230\u3002 weight \u6bcf\u4e2a\u5206\u7247\u7684\u5199\u5165\u6743\u91cd\u503c\uff0c\u6570\u636e\u5199\u5165\u65f6\u4f1a\u6709\u8f83\u5927\u6982\u7387\u843d\u5230weight\u503c\u8f83\u5927\u7684\u5206\u7247\uff0c\u8fd9\u91cc\u5168\u90e8\u8bbe\u4e3a1\u3002 internal_replication \u662f\u5426\u542f\u7528\u5185\u90e8\u590d\u5236\uff0c\u5373\u5199\u5165\u6570\u636e\u65f6\u53ea\u5199\u5165\u5230\u4e00\u4e2a\u526f\u672c\uff0c\u5176\u4ed6\u526f\u672c\u7684\u540c\u6b65\u5de5\u4f5c\u9760\u590d\u5236\u8868\u548cZooKeeper\u5f02\u6b65\u8fdb\u884c\u3002 \u6211\u4eec\u5728shard\u5206\u7247\u4e2d\u8bbe\u7f6e\u7684\u662f\u5faa\u73af\u5206\u7247\u8fd9\u6837\u4fdd\u8bc1\u6211\u4eec\u590d\u5236\u7684\u8282\u70b9\u67d0\u4e00\u4e2a\u5b95\u673a\u540e\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c \u5c06\u914d\u7f6e\u5206\u53d1\u5230\u6240\u6709\u90e8\u7f72ClickHouse\u7684\u8282\u70b9\u4e2d\u8fdb\u884c\u670d\u52a1\u91cd\u542f \u6b64\u65f6\u6211\u4eec\u7684ClickHouse\u96c6\u7fa4\u5df2\u7ecf\u642d\u5efa\u5b8c\u6210\uff01","title":"\u914d\u7f6eClickHouse\u96c6\u7fa4"},{"location":"ClickHouse/2021-09-29-get-started-mulit-cluster/","text":"\u4e3a\u4e86\u6211\u4eec\u65b9\u4fbf\u627e\u5230\u6211\u4eec\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u6211\u4eec\u5c06CK\u96c6\u7fa4\u505a\u5206\u5f00\u914d\u7f6e \u4fee\u6539\u96c6\u7fa4\u914d\u7f6e \u00b6 \u4fee\u6539 vim /etc/clickhouse-server/config.xml \u914d\u7f6e\u6587\u4ef6 <zookeeper> <node index= \"1\" > <host> zk1 </host> <port> 2181 </port> </node> <node index= \"2\" > <host> zk2 </host> <port> 2181 </port> </node> <node index= \"3\" > <host> zk3 </host> <port> 2181 </port> </node> </zookeeper> <remote_servers> <ck_cluster> <shard> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck1 </host> <port> 9000 </port> </replica> <replica> <host> ck2 </host> <port> 9000 </port> </replica> </shard> <shard> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck2 </host> <port> 9000 </port> </replica> <replica> <host> ck3 </host> <port> 9000 </port> </replica> </shard> <shard> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck3 </host> <port> 9000 </port> </replica> <replica> <host> ck1 </host> <port> 9000 </port> </replica> </shard> </ck_cluster> </remote_servers> \u5220\u9664\u4ee5\u4e0a\u4e24\u4e2a\u914d\u7f6e\u4fe1\u606f\uff0c\u65b0\u589e\u4ee5\u4e0b\u5185\u5bb9 <remote_servers incl= \"clickhouse_remote_servers\" /> <zookeeper incl= \"zookeeper-servers\" optional= \"true\" /> <include_from> /etc/clickhouse-server/ck-cluster.xml </include_from> remote_servers \u6807\u5fd7\u6211\u4eec\u5728\u5916\u90e8\u6587\u4ef6\u4e2d\u5f15\u7528\u7684\u96c6\u7fa4\u914d\u7f6e\u8282\u70b9\u662f clickhouse_remote_servers zookeeper \u6807\u5fd7\u6211\u4eec\u5728\u5916\u90e8\u6587\u4ef6\u5f15\u7528\u7684ZK\u96c6\u7fa4\u914d\u7f6e\u8282\u70b9\u662f zookeeper-servers include_from \u6807\u5fd7\u6211\u4eec\u5f15\u7528\u7684\u5916\u90e8\u914d\u7f6e\u6587\u4ef6\uff0c\u6307\u5b9a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84 \u65b0\u5efa\u96c6\u7fa4\u914d\u7f6e\u6587\u4ef6 \u00b6 \u521a\u521a\u6211\u4eec\u6307\u5b9a\u4e86 /etc/clickhouse-server/ck-cluster.xml \u914d\u7f6e\u6587\u4ef6\uff0c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u53bb\u5bf9\u8be5\u6587\u4ef6\u505a\u914d\u7f6e \u521b\u5efa\u65b0\u7684\u914d\u7f6e\u6587\u4ef6 touch /etc/clickhouse-server/ck-cluster.xml \u5728\u65b0\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u589e\u52a0 zookeeper \u548c clickhouse \u96c6\u7fa4\u4fe1\u606f <yandex> <zookeeper-servers> <node index= \"1\" > <host> zk1 </host> <port> 2181 </port> </node> <node index= \"2\" > <host> zk2 </host> <port> 2181 </port> </node> <node index= \"3\" > <host> zk3 </host> <port> 2181 </port> </node> </zookeeper-servers> <clickhouse_remote_servers> <ck_cluster> <shard_1> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck1 </host> <port> 9000 </port> </replica> <replica> <host> ck2 </host> <port> 9000 </port> </replica> </shard_1> <shard_2> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck2 </host> <port> 9000 </port> </replica> <replica> <host> ck3 </host> <port> 9000 </port> </replica> </shard_2> <shard_3> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck3 </host> <port> 9000 </port> </replica> <replica> <host> ck1 </host> <port> 9000 </port> </replica> </shard_3> </ck_cluster> </clickhouse_remote_servers> <networks> <ip> ::/0 </ip> </networks> </yandex> \u6b64\u5904\u9700\u8981\u6ce8\u610f\u7684\u662f\u5728yandex\u4e2d\u914d\u7f6e\u7684\u76f8\u5173\u8282\u70b9\u4e00\u5b9a\u5230\u548cconfig.xml\u4e2d\u7684 <remote_servers incl=\"clickhouse_remote_servers\" /> <zookeeper incl=\"zookeeper-servers\" optional=\"true\" /> \u8fd9\u4e24\u4e2a\u5c5e\u6027\u7684incl\u4e00\u81f4\uff0c\u5426\u5219\u4f1a\u626b\u63cf\u4e0d\u5230\u96c6\u7fa4\u6807\u5fd7 \u4fee\u6539\u914d\u7f6e\u540e\u6211\u4eec\u4e0d\u9700\u8981\u91cd\u542f\u670d\u52a1\uff0cClickHouse\u4f1a\u81ea\u52a8\u52a0\u8f7d\u4fee\u6539\u540e\u7684\u914d\u7f6e\u4fe1\u606f \u6211\u4eec\u914d\u7f6e\u591a\u4e2a\u96c6\u7fa4\u4f7f\u7528\u591a\u4e2a\u914d\u7f6e\u6587\u4ef6\u5373\u53ef\uff0c\u591a\u4e2areplica\u8282\u70b9\u914d\u7f6e\u591a\u4e2a\u4e5f\u662f\u53ef\u4ee5\u7684","title":"ClickHouse\u591a\u96c6\u7fa4\u914d\u7f6e"},{"location":"ClickHouse/2021-09-29-get-started-mulit-cluster/#_1","text":"\u4fee\u6539 vim /etc/clickhouse-server/config.xml \u914d\u7f6e\u6587\u4ef6 <zookeeper> <node index= \"1\" > <host> zk1 </host> <port> 2181 </port> </node> <node index= \"2\" > <host> zk2 </host> <port> 2181 </port> </node> <node index= \"3\" > <host> zk3 </host> <port> 2181 </port> </node> </zookeeper> <remote_servers> <ck_cluster> <shard> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck1 </host> <port> 9000 </port> </replica> <replica> <host> ck2 </host> <port> 9000 </port> </replica> </shard> <shard> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck2 </host> <port> 9000 </port> </replica> <replica> <host> ck3 </host> <port> 9000 </port> </replica> </shard> <shard> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck3 </host> <port> 9000 </port> </replica> <replica> <host> ck1 </host> <port> 9000 </port> </replica> </shard> </ck_cluster> </remote_servers> \u5220\u9664\u4ee5\u4e0a\u4e24\u4e2a\u914d\u7f6e\u4fe1\u606f\uff0c\u65b0\u589e\u4ee5\u4e0b\u5185\u5bb9 <remote_servers incl= \"clickhouse_remote_servers\" /> <zookeeper incl= \"zookeeper-servers\" optional= \"true\" /> <include_from> /etc/clickhouse-server/ck-cluster.xml </include_from> remote_servers \u6807\u5fd7\u6211\u4eec\u5728\u5916\u90e8\u6587\u4ef6\u4e2d\u5f15\u7528\u7684\u96c6\u7fa4\u914d\u7f6e\u8282\u70b9\u662f clickhouse_remote_servers zookeeper \u6807\u5fd7\u6211\u4eec\u5728\u5916\u90e8\u6587\u4ef6\u5f15\u7528\u7684ZK\u96c6\u7fa4\u914d\u7f6e\u8282\u70b9\u662f zookeeper-servers include_from \u6807\u5fd7\u6211\u4eec\u5f15\u7528\u7684\u5916\u90e8\u914d\u7f6e\u6587\u4ef6\uff0c\u6307\u5b9a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84","title":"\u4fee\u6539\u96c6\u7fa4\u914d\u7f6e"},{"location":"ClickHouse/2021-09-29-get-started-mulit-cluster/#_2","text":"\u521a\u521a\u6211\u4eec\u6307\u5b9a\u4e86 /etc/clickhouse-server/ck-cluster.xml \u914d\u7f6e\u6587\u4ef6\uff0c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u53bb\u5bf9\u8be5\u6587\u4ef6\u505a\u914d\u7f6e \u521b\u5efa\u65b0\u7684\u914d\u7f6e\u6587\u4ef6 touch /etc/clickhouse-server/ck-cluster.xml \u5728\u65b0\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u589e\u52a0 zookeeper \u548c clickhouse \u96c6\u7fa4\u4fe1\u606f <yandex> <zookeeper-servers> <node index= \"1\" > <host> zk1 </host> <port> 2181 </port> </node> <node index= \"2\" > <host> zk2 </host> <port> 2181 </port> </node> <node index= \"3\" > <host> zk3 </host> <port> 2181 </port> </node> </zookeeper-servers> <clickhouse_remote_servers> <ck_cluster> <shard_1> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck1 </host> <port> 9000 </port> </replica> <replica> <host> ck2 </host> <port> 9000 </port> </replica> </shard_1> <shard_2> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck2 </host> <port> 9000 </port> </replica> <replica> <host> ck3 </host> <port> 9000 </port> </replica> </shard_2> <shard_3> <weight> 1 </weight> <internal_replication> true </internal_replication> <replica> <host> ck3 </host> <port> 9000 </port> </replica> <replica> <host> ck1 </host> <port> 9000 </port> </replica> </shard_3> </ck_cluster> </clickhouse_remote_servers> <networks> <ip> ::/0 </ip> </networks> </yandex> \u6b64\u5904\u9700\u8981\u6ce8\u610f\u7684\u662f\u5728yandex\u4e2d\u914d\u7f6e\u7684\u76f8\u5173\u8282\u70b9\u4e00\u5b9a\u5230\u548cconfig.xml\u4e2d\u7684 <remote_servers incl=\"clickhouse_remote_servers\" /> <zookeeper incl=\"zookeeper-servers\" optional=\"true\" /> \u8fd9\u4e24\u4e2a\u5c5e\u6027\u7684incl\u4e00\u81f4\uff0c\u5426\u5219\u4f1a\u626b\u63cf\u4e0d\u5230\u96c6\u7fa4\u6807\u5fd7 \u4fee\u6539\u914d\u7f6e\u540e\u6211\u4eec\u4e0d\u9700\u8981\u91cd\u542f\u670d\u52a1\uff0cClickHouse\u4f1a\u81ea\u52a8\u52a0\u8f7d\u4fee\u6539\u540e\u7684\u914d\u7f6e\u4fe1\u606f \u6211\u4eec\u914d\u7f6e\u591a\u4e2a\u96c6\u7fa4\u4f7f\u7528\u591a\u4e2a\u914d\u7f6e\u6587\u4ef6\u5373\u53ef\uff0c\u591a\u4e2areplica\u8282\u70b9\u914d\u7f6e\u591a\u4e2a\u4e5f\u662f\u53ef\u4ee5\u7684","title":"\u65b0\u5efa\u96c6\u7fa4\u914d\u7f6e\u6587\u4ef6"},{"location":"Google/Guice/2021-08-15-guice-binder-basic/","text":"\u672c\u6587\u7ae0\u4e3b\u8981\u8be6\u7ec6\u8bb2\u89e3Guice\u7684\u4e00\u4e9b\u57fa\u672c\u6ce8\u5165\u65b9\u5f0f,\u901a\u8fc7\u8be5\u7b80\u5355\u6559\u7a0b\u8ba9\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u4f7f\u7528Guice\u8fdb\u884c\u7b80\u5355\u7cfb\u7edf\u5316\u5f00\u53d1,\u540e\u7eed\u6211\u4eec\u4f1a\u66f4\u6df1\u5165\u8bb2\u89e3\u66f4\u591a\u6a21\u5757,\u5982\u679c\u8fd8\u4e0d\u4e86\u89e3Guice\u5927\u5bb6\u53ef\u4ee5\u5148\u53bb\u7f51\u4e0a\u81ea\u884c\u4e86\u89e3\u4e00\u4e0b. \u57fa\u7840\u73af\u5883 \u00b6 \u6280\u672f \u7248\u672c Java 1.8+ Guice 4.2.3 \u521d\u59cb\u5316\u9879\u76ee \u00b6 \u521d\u59cb\u5316\u9879\u76ee mvn archetype:generate -DgroupId = io.edurt.lc.guice -DartifactId = guice-binder-basic -DarchetypeArtifactId = maven-archetype-quickstart -Dversion = 1 .0.0 -DinteractiveMode = false \u4fee\u6539pom.xml\u589e\u52a0Guice\u4f9d\u8d56 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> lc-guice </artifactId> <groupId> io.edurt.lc.guice </groupId> <version> 1.0.0 </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> guice-binder-basic </artifactId> <name> Learning Center for Guice Binder(Basic) </name> <properties> <maven.compiler.source> 1.8 </maven.compiler.source> <maven.compiler.target> 1.8 </maven.compiler.target> </properties> <dependencies> <dependency> <groupId> com.google.inject </groupId> <artifactId> guice </artifactId> <version> 4.2.3 </version> </dependency> </dependencies> </project> guice : guice\u5c31\u662f\u6211\u4eec\u6838\u5fc3\u8981\u4f7f\u7528\u7684\u4f9d\u8d56 Guice\u7684\u7ed1\u5b9a\u6a21\u578b \u00b6 \u4fee\u6539 pom.xml \u914d\u7f6e\u6587\u4ef6,\u5728 dependencies \u8282\u70b9\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9 <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> <scope> test </scope> </dependency> \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice**\u76ee\u5f55\u5e76\u5728\u8be5\u76ee\u5f55\u4e0b\u65b0\u5efa GuiceBasicModule \u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.AbstractModule ; public class GuiceBasicModule extends AbstractModule { @Override protected void configure () { System . out . println ( \"Hello, GuiceBasicModule\" ); } } Guice\u4e2d\u7684\u7ed1\u5b9a\u6a21\u578b\u548cSpring\u4e2d\u7684\u4e00\u6837\u7b80\u5355,\u6211\u4eec\u901a\u8fc7\u7ed1\u5b9a\u53ef\u4ee5\u63d0\u4f9b\u7ed9\u7a0b\u5e8f\u4efb\u610f\u6ce8\u5165\u7c7b. \u7ed1\u5b9a\u6211\u4eec\u9700\u8981\u7684Module\u53ea\u9700\u8981\u7ee7\u627fGuice\u4e2d\u7684 com.google.inject.AbstractModule \u5373\u53ef,\u5728 configure \u65b9\u6cd5\u4e2d\u5b9e\u73b0\u6211\u4eec\u9700\u8981\u7684\u7ed1\u5b9a\u4fe1\u606f. \u5728 src/test/java \u6e90\u4ee3\u7801\u76ee\u5f55\u4e0b\u6784\u5efa**io.edurt.lc.guice.TestGuiceBasicModule**\u5355\u5143\u6d4b\u8bd5\u7c7b\u6587\u4ef6\u7528\u4e8e\u6211\u4eec\u6d4b\u8bd5\u4ee3\u7801,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.AbstractModule ; public class GuiceBasicModule extends AbstractModule { @Override protected void configure () { System . out . println ( \"Hello, GuiceBasicModule\" ); } } \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Hello, GuiceBasicModule \u6216\u8005\u4f7f\u7528maven\u547d\u4ee4 mvn clean package ,\u5b83\u5c06\u8f93\u51fa\u7c7b\u4f3c\u4ee5\u4e0b\u5185\u5bb9 ...... ------------------------------------------------------- T E S T S ------------------------------------------------------- Running io.edurt.lc.guice.TestGuiceBasicModule Hello, GuiceBasicModule Tests run: 1 , Failures: 0 , Errors: 0 , Skipped: 0 , Time elapsed: 0 .094 sec Results : Tests run: 1 , Failures: 0 , Errors: 0 , Skipped: 0 ...... \u81ea\u5b9a\u4e49Class \u00b6 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa io.edurt.lc.guice.GuiceBasicService \u7c7b\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b package io.edurt.lc.guice ; public interface GuiceBasicService { void print ( String input ); } \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u63a5\u53e3\u6587\u4ef6,\u5b83\u6784\u5efa\u4e86\u4e00\u4e2a print \u65b9\u6cd5\u7528\u4e8e\u4fe1\u606f\u8f93\u51fa. \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa io.edurt.lc.guice.GuiceBasicServiceImpl \u7c7b\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b package io.edurt.lc.guice ; public class GuiceBasicServiceImpl implements GuiceBasicService { @Override public void print ( String input ) { System . out . println ( String . format ( \"print %s\" , input )); } } \u5b83\u5b9e\u73b0\u4e86 io.edurt.lc.guice.GuiceBasicService \u7c7b\u4e2d\u7684\u6253\u5370\u6570\u636e\u529f\u80fd \u4fee\u6539 src/main/java \u76ee\u5f55\u4e0b io.edurt.lc.guice.GuiceBasicModule \u6587\u4ef6\u5728 configure() \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 bind ( GuiceBasicService . class ). to ( GuiceBasicServiceImpl . class ); \u8fd9\u6837\u6211\u4eec\u5c31\u5f88\u5feb\u7684\u7ed1\u5b9a\u4e86\u4e00\u4e2a\u670d\u52a1,\u7c7b\u4f3c\u4e8eSpring\u4e2d\u7684 @Bean \u65b9\u5f0f bind \u6807\u5fd7\u6211\u4eec\u9700\u8981\u7ed1\u5b9a\u7684\u7c7b, to \u6807\u5fd7\u6211\u4eec\u7ed1\u5b9a\u7684\u5b9e\u73b0\u7c7b \u63a5\u4e0b\u6765\u4fee\u6539 src/test/java \u76ee\u5f55\u4e0b\u7684 io.edurt.lc.guice.TestGuiceBasicModule \u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 @Test public void test_service () { Injector injector = Guice . createInjector ( new GuiceBasicModule ()); GuiceBasicService service = injector . getInstance ( GuiceBasicService . class ); service . print ( \"Hello Guice\" ); } \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Hello, GuiceBasicModule print Hello Guice \u4f7f\u7528 @ImplementedBy \u6ce8\u89e3 \u00b6 \u4f7f\u7528 @ImplementedBy \u5f88\u7b80\u5355,\u6211\u4eec\u53ea\u9700\u8981\u5728 interface \u7684\u63a5\u53e3\u7c7b\u4e0a\u6dfb\u52a0 @ImplementedBy(GuiceBasicServiceImpl.class) \u6ce8\u89e3\u5373\u53ef,\u4fee\u6539\u540e\u7684\u4ee3\u7801\u5982\u4e0b @ImplementedBy \u544a\u77e5\u7a0b\u5e8f\u6211\u4eec\u7684\u63a5\u53e3\u5177\u4f53\u5b9e\u73b0\u7c7b,Guice\u4f1a\u5e2e\u6211\u4eec\u505a\u81ea\u52a8\u5b9e\u4f8b\u5316 GuiceBasicService package io.edurt.lc.guice ; @ImplementedBy ( GuiceBasicServiceImpl . class ) public interface GuiceBasicService { void print ( String input ); } GuiceBasicServiceImpl \u7c7b\u4e2d\u7684\u5185\u5bb9\u4e0d\u53d8 \u5220\u9664 src/test/java \u76ee\u5f55\u4e0b\u7684 io.edurt.lc.guice.TestGuiceBasicModule \u7c7b\u6587\u4ef6\u4e2d\u7684 GuiceBasicService service = injector.getInstance(GuiceBasicService.class); \u4ee3\u7801\u6bb5\u5373\u53ef. \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Hello, GuiceBasicModule print Hello Guice \u6e90\u7801\u5730\u5740 \u00b6 GitHub","title":"Guice\u4f9d\u8d56\u6ce8\u5165(\u57fa\u7840\u7248)"},{"location":"Google/Guice/2021-08-15-guice-binder-basic/#_1","text":"\u6280\u672f \u7248\u672c Java 1.8+ Guice 4.2.3","title":"\u57fa\u7840\u73af\u5883"},{"location":"Google/Guice/2021-08-15-guice-binder-basic/#_2","text":"\u521d\u59cb\u5316\u9879\u76ee mvn archetype:generate -DgroupId = io.edurt.lc.guice -DartifactId = guice-binder-basic -DarchetypeArtifactId = maven-archetype-quickstart -Dversion = 1 .0.0 -DinteractiveMode = false \u4fee\u6539pom.xml\u589e\u52a0Guice\u4f9d\u8d56 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> lc-guice </artifactId> <groupId> io.edurt.lc.guice </groupId> <version> 1.0.0 </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> guice-binder-basic </artifactId> <name> Learning Center for Guice Binder(Basic) </name> <properties> <maven.compiler.source> 1.8 </maven.compiler.source> <maven.compiler.target> 1.8 </maven.compiler.target> </properties> <dependencies> <dependency> <groupId> com.google.inject </groupId> <artifactId> guice </artifactId> <version> 4.2.3 </version> </dependency> </dependencies> </project> guice : guice\u5c31\u662f\u6211\u4eec\u6838\u5fc3\u8981\u4f7f\u7528\u7684\u4f9d\u8d56","title":"\u521d\u59cb\u5316\u9879\u76ee"},{"location":"Google/Guice/2021-08-15-guice-binder-basic/#guice","text":"\u4fee\u6539 pom.xml \u914d\u7f6e\u6587\u4ef6,\u5728 dependencies \u8282\u70b9\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9 <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> <scope> test </scope> </dependency> \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice**\u76ee\u5f55\u5e76\u5728\u8be5\u76ee\u5f55\u4e0b\u65b0\u5efa GuiceBasicModule \u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.AbstractModule ; public class GuiceBasicModule extends AbstractModule { @Override protected void configure () { System . out . println ( \"Hello, GuiceBasicModule\" ); } } Guice\u4e2d\u7684\u7ed1\u5b9a\u6a21\u578b\u548cSpring\u4e2d\u7684\u4e00\u6837\u7b80\u5355,\u6211\u4eec\u901a\u8fc7\u7ed1\u5b9a\u53ef\u4ee5\u63d0\u4f9b\u7ed9\u7a0b\u5e8f\u4efb\u610f\u6ce8\u5165\u7c7b. \u7ed1\u5b9a\u6211\u4eec\u9700\u8981\u7684Module\u53ea\u9700\u8981\u7ee7\u627fGuice\u4e2d\u7684 com.google.inject.AbstractModule \u5373\u53ef,\u5728 configure \u65b9\u6cd5\u4e2d\u5b9e\u73b0\u6211\u4eec\u9700\u8981\u7684\u7ed1\u5b9a\u4fe1\u606f. \u5728 src/test/java \u6e90\u4ee3\u7801\u76ee\u5f55\u4e0b\u6784\u5efa**io.edurt.lc.guice.TestGuiceBasicModule**\u5355\u5143\u6d4b\u8bd5\u7c7b\u6587\u4ef6\u7528\u4e8e\u6211\u4eec\u6d4b\u8bd5\u4ee3\u7801,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.AbstractModule ; public class GuiceBasicModule extends AbstractModule { @Override protected void configure () { System . out . println ( \"Hello, GuiceBasicModule\" ); } } \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Hello, GuiceBasicModule \u6216\u8005\u4f7f\u7528maven\u547d\u4ee4 mvn clean package ,\u5b83\u5c06\u8f93\u51fa\u7c7b\u4f3c\u4ee5\u4e0b\u5185\u5bb9 ...... ------------------------------------------------------- T E S T S ------------------------------------------------------- Running io.edurt.lc.guice.TestGuiceBasicModule Hello, GuiceBasicModule Tests run: 1 , Failures: 0 , Errors: 0 , Skipped: 0 , Time elapsed: 0 .094 sec Results : Tests run: 1 , Failures: 0 , Errors: 0 , Skipped: 0 ......","title":"Guice\u7684\u7ed1\u5b9a\u6a21\u578b"},{"location":"Google/Guice/2021-08-15-guice-binder-basic/#class","text":"\u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa io.edurt.lc.guice.GuiceBasicService \u7c7b\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b package io.edurt.lc.guice ; public interface GuiceBasicService { void print ( String input ); } \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u63a5\u53e3\u6587\u4ef6,\u5b83\u6784\u5efa\u4e86\u4e00\u4e2a print \u65b9\u6cd5\u7528\u4e8e\u4fe1\u606f\u8f93\u51fa. \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa io.edurt.lc.guice.GuiceBasicServiceImpl \u7c7b\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b package io.edurt.lc.guice ; public class GuiceBasicServiceImpl implements GuiceBasicService { @Override public void print ( String input ) { System . out . println ( String . format ( \"print %s\" , input )); } } \u5b83\u5b9e\u73b0\u4e86 io.edurt.lc.guice.GuiceBasicService \u7c7b\u4e2d\u7684\u6253\u5370\u6570\u636e\u529f\u80fd \u4fee\u6539 src/main/java \u76ee\u5f55\u4e0b io.edurt.lc.guice.GuiceBasicModule \u6587\u4ef6\u5728 configure() \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 bind ( GuiceBasicService . class ). to ( GuiceBasicServiceImpl . class ); \u8fd9\u6837\u6211\u4eec\u5c31\u5f88\u5feb\u7684\u7ed1\u5b9a\u4e86\u4e00\u4e2a\u670d\u52a1,\u7c7b\u4f3c\u4e8eSpring\u4e2d\u7684 @Bean \u65b9\u5f0f bind \u6807\u5fd7\u6211\u4eec\u9700\u8981\u7ed1\u5b9a\u7684\u7c7b, to \u6807\u5fd7\u6211\u4eec\u7ed1\u5b9a\u7684\u5b9e\u73b0\u7c7b \u63a5\u4e0b\u6765\u4fee\u6539 src/test/java \u76ee\u5f55\u4e0b\u7684 io.edurt.lc.guice.TestGuiceBasicModule \u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 @Test public void test_service () { Injector injector = Guice . createInjector ( new GuiceBasicModule ()); GuiceBasicService service = injector . getInstance ( GuiceBasicService . class ); service . print ( \"Hello Guice\" ); } \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Hello, GuiceBasicModule print Hello Guice","title":"\u81ea\u5b9a\u4e49Class"},{"location":"Google/Guice/2021-08-15-guice-binder-basic/#implementedby","text":"\u4f7f\u7528 @ImplementedBy \u5f88\u7b80\u5355,\u6211\u4eec\u53ea\u9700\u8981\u5728 interface \u7684\u63a5\u53e3\u7c7b\u4e0a\u6dfb\u52a0 @ImplementedBy(GuiceBasicServiceImpl.class) \u6ce8\u89e3\u5373\u53ef,\u4fee\u6539\u540e\u7684\u4ee3\u7801\u5982\u4e0b @ImplementedBy \u544a\u77e5\u7a0b\u5e8f\u6211\u4eec\u7684\u63a5\u53e3\u5177\u4f53\u5b9e\u73b0\u7c7b,Guice\u4f1a\u5e2e\u6211\u4eec\u505a\u81ea\u52a8\u5b9e\u4f8b\u5316 GuiceBasicService package io.edurt.lc.guice ; @ImplementedBy ( GuiceBasicServiceImpl . class ) public interface GuiceBasicService { void print ( String input ); } GuiceBasicServiceImpl \u7c7b\u4e2d\u7684\u5185\u5bb9\u4e0d\u53d8 \u5220\u9664 src/test/java \u76ee\u5f55\u4e0b\u7684 io.edurt.lc.guice.TestGuiceBasicModule \u7c7b\u6587\u4ef6\u4e2d\u7684 GuiceBasicService service = injector.getInstance(GuiceBasicService.class); \u4ee3\u7801\u6bb5\u5373\u53ef. \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Hello, GuiceBasicModule print Hello Guice","title":"\u4f7f\u7528@ImplementedBy\u6ce8\u89e3"},{"location":"Google/Guice/2021-08-15-guice-binder-basic/#_3","text":"GitHub","title":"\u6e90\u7801\u5730\u5740"},{"location":"Google/Guice/2021-08-18-guice-binder-constructor/","text":"\u672c\u6587\u7ae0\u4e3b\u8981\u8be6\u7ec6\u8bb2\u89e3Guice\u7684\u6784\u9020\u51fd\u6570\u6ce8\u5165. \u6211\u4eec\u5c06\u901a\u8fc7\u8be6\u7ec6\u7684\u4ee3\u7801\u4ee5\u53ca\u6b65\u9aa4\u8fdb\u884c\u8bb2\u89e3. \u57fa\u7840\u73af\u5883 \u00b6 \u6280\u672f \u7248\u672c Java 1.8+ Guice 4.2.3 \u521d\u59cb\u5316\u9879\u76ee \u00b6 \u521d\u59cb\u5316\u9879\u76ee mvn archetype:generate -DgroupId = io.edurt.lc.guice -DartifactId = guice-binder-constructor -DarchetypeArtifactId = maven-archetype-quickstart -Dversion = 1 .0.0 -DinteractiveMode = false \u4fee\u6539pom.xml\u589e\u52a0Guice\u4f9d\u8d56 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> lc-guice </artifactId> <groupId> io.edurt.lc.guice </groupId> <version> 1.0.0 </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> guice-binder-constructor </artifactId> <name> Learning Center for Guice Binder(Constructor) </name> <properties> <maven.compiler.source> 1.8 </maven.compiler.source> <maven.compiler.target> 1.8 </maven.compiler.target> </properties> <dependencies> <dependency> <groupId> com.google.inject </groupId> <artifactId> guice </artifactId> <version> 4.2.3 </version> </dependency> <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> <scope> test </scope> </dependency> </dependencies> </project> guice : guice\u5c31\u662f\u6211\u4eec\u6838\u5fc3\u8981\u4f7f\u7528\u7684\u4f9d\u8d56 \u6784\u9020\u51fd\u6570\u6ce8\u5165 \u00b6 \u5728Guice\u4e2d\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u9700\u8981\u7684\u5b9e\u4f53\u4fe1\u606f\u901a\u8fc7\u6784\u9020\u51fd\u6570\u76f4\u63a5\u6ce8\u5165\u5230\u6211\u4eec\u9700\u8981\u7684\u4efb\u610f\u5730\u65b9\uff0c\u6211\u4eec\u901a\u8fc7\u5217\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u6765\u5b9e\u9645\u8bf4\u660e\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceConstructorService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.ImplementedBy ; @ImplementedBy ( GuiceConstructorServiceImpl . class ) public interface GuiceConstructorService { void print ( String source ); } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceConstructorServiceImpl**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public class GuiceConstructorServiceImpl implements GuiceConstructorService { @Override public void print ( String source ) { System . out . println ( String . format ( \"Hello Guice Binder For Constructor, %s\" , source )); } } \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceConstructor**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; public class TestGuiceConstructor { private GuiceConstructorService service ; @Inject public TestGuiceConstructor ( GuiceConstructorService service ) { this . service = service ; } public GuiceConstructorService getService () { return service ; } public static void main ( String [] args ) { TestGuiceConstructor test = Guice . createInjector (). getInstance ( TestGuiceConstructor . class ); test . getService (). print ( \"Test Case 1\" ); } } \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Hello Guice Binder For Constructor, Test Case 1 \u8fd9\u4e2a\u793a\u4f8b\u5f88\u597d\u7406\u89e3\uff0c\u5b9e\u9645\u5c31\u662f\u8bf4\u6211\u4eec\u5c06 GuiceConstructorService \u63a5\u53e3\u901a\u8fc7 @Inject \u6ce8\u5165\u5230\u4e86 TestGuiceConstructor \u5e94\u7528\u4e2d\u3002\u5f53\u7136\u6211\u4eec\u901a\u8fc7 @ImplementedBy(GuiceConstructorServiceImpl.class) \u5b9e\u73b0\u4e86\u7c7b\u4f3c GuiceConstructorService service = new GuiceConstructorServiceImpl() \u7684\u64cd\u4f5c\uff0c\u4e0d\u8fc7\u6bcf\u6b21\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\uff0c\u5982\u679c\u9700\u8981\u5355\u4f8b\u6a21\u5f0f\u7684\u8bdd\uff0c\u9700\u8981\u5355\u72ec\u64cd\u4f5c\u3002 \u6ce8\u610f\uff1a\u5728\u672c\u6b21\u7a0b\u5e8f\u4e2d\u6211\u4eec\u5e76\u6ca1\u6709\u901a\u8fc7Module\u5173\u8054\u5230Guice\uff0c\u65b9\u4fbf\u6211\u4eec\u5feb\u901f\u6d4b\u8bd5\u5e94\u7528\u7b49\u3002 \u6211\u4eec\u65e0\u6cd5\u901a\u8fc7\u975eGuice\u5bb9\u5668\u8fdb\u884c\u6ce8\u5165\uff0c\u4ee5\u4e0b\u5c31\u662f\u4e00\u4e2a\u9519\u8bef\u7684\u793a\u4f8b static\u4e5f\u662f\u65e0\u6cd5\u8fdb\u884c\u6ce8\u5165\u7684 package io.edurt.lc.guice ; import com.google.inject.Inject ; public class TestGuiceConstructorNo { @Inject private GuiceConstructorService service ; public GuiceConstructorService getService () { return service ; } public static void main ( String [] args ) { TestGuiceConstructorNo test = new TestGuiceConstructorNo (); test . getService (). print ( \"Test Case 1\" ); } } \u6211\u4eec\u8fd0\u884c\u4e0a\u8ff0\u4ee3\u7801\uff0c\u4f1a\u63d0\u793a\u4ee5\u4e0b\u9519\u8bef\u4fe1\u606f Exception in thread \"main\" java.lang.NullPointerException at io.edurt.lc.guice.TestGuiceConstructorNo.main ( TestGuiceConstructorNo.java:18 ) \u8fd9\u4e5f\u5c31\u8bf4\u660e\u6211\u4eec\u65e0\u6cd5\u5728\u975eGuice\u5bb9\u5668\u4e2d\u8fdb\u884c\u5b9e\u4f8b\u6ce8\u5165 \u591a\u53c2\u6570\u6ce8\u5165 \u00b6 \u4e0a\u8ff0\u5b9e\u4f8b\u6211\u4eec\u53ea\u662f\u6ce8\u5165\u4e86\u4e00\u4e2a\u53c2\u6570\uff0c\u90a3\u6211\u4eec\u5c1d\u8bd5\u4e00\u4e0b\u591a\u53c2\u6570\u6ce8\u5165\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceConstructorTwoService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.ImplementedBy ; @ImplementedBy ( GuiceConstructorTwoServiceImpl . class ) public interface GuiceConstructorTwoService { void print (); } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceConstructorTwoServiceImpl**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public class GuiceConstructorTwoServiceImpl implements GuiceConstructorTwoService { @Override public void print () { System . out . println ( String . format ( \"Hello Guice Binder For Constructor Two\" )); } } \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceConstructorMultiple**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; public class TestGuiceConstructorMultiple { private GuiceConstructorService service ; private GuiceConstructorTwoService twoService ; public GuiceConstructorService getService () { return service ; } public void setService ( GuiceConstructorService service ) { this . service = service ; } public GuiceConstructorTwoService getTwoService () { return twoService ; } public void setTwoService ( GuiceConstructorTwoService twoService ) { this . twoService = twoService ; } @Inject public TestGuiceConstructorMultiple ( GuiceConstructorService service , GuiceConstructorTwoService twoService ) { this . service = service ; this . twoService = twoService ; } public static void main ( String [] args ) { TestGuiceConstructorMultiple multiple = Guice . createInjector (). getInstance ( TestGuiceConstructorMultiple . class ); multiple . getService (). print ( \"One\" ); multiple . getTwoService (). print (); } } \u8fd0\u884c\u7a0b\u5e8f\u540e\uff0c\u8f93\u51fa\u4ee5\u4e0b\u7ed3\u679c Hello Guice Binder For Constructor, One Hello Guice Binder For Constructor Two \u6211\u4eec\u4f7f\u7528\u4e00\u4e2a @Inject \u4e5f\u80fd\u5b9e\u73b0\u591a\u4e2a\u53c2\u6570\u7684\u5b9e\u4f8b\u6ce8\u5165\uff0c\u5f53\u7136\u8fd8\u652f\u6301Set\u65b9\u5f0f\u6ce8\u5165\uff0c\u53ea\u9700\u8981\u5728\u53c2\u6570\u7684set\u65b9\u6cd5\u4e0a\u589e\u52a0 @Inject \u6ce8\u89e3\u5373\u53ef\u5b9e\u73b0\uff0c\u8fd9\u91cc\u6211\u4eec\u4e0d\u591a\u505a\u53d9\u8ff0\uff0c\u53ef\u81ea\u884c\u5b9e\u9a8c\u3002 static\u9759\u6001\u53c2\u6570\u6ce8\u5165 \u00b6 \u6211\u4eec\u8bf4\u8fc7\u65e0\u6cd5\u901a\u8fc7static\u5c5e\u6027\u76f4\u63a5\u8fdb\u884c\u6ce8\u5165\u4f7f\u7528\uff0c\u65b9\u6cd5\u603b\u662f\u5f88\u591a\u7684\uff0cGuice\u63d0\u4f9b\u4e86\u4ee5\u4e0bstatic\u6ce8\u5165\u65b9\u5f0f. \u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceStatic**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; public class TestGuiceStatic { @Inject private static GuiceConstructorService service ; public static void main ( String [] args ) { Guice . createInjector ( binder -> binder . requestStaticInjection ( TestGuiceStatic . class )); TestGuiceStatic . service . print ( \"Static\" ); } } \u8fd0\u884c\u7a0b\u5e8f\u540e\uff0c\u8f93\u51fa\u4ee5\u4e0b\u7ed3\u679c Hello Guice Binder For Constructor, Static \u5728\u4ee3\u7801\u4e2d\u6211\u4eec\u6ca1\u6709\u5411\u4ee5\u4e0a\u4e24\u4e2a\u793a\u4f8b\u76f4\u63a5\u4f7f\u7528 Guice \u83b7\u53d6\u5b9e\u4f8b\uff0c\u800c\u662f\u4f7f\u7528\u4e86 binder.requestStaticInjection \u65b9\u5f0f\u8fdb\u884c\u4e86\u6ce8\u5165\uff0c\u8fd9\u4e2a\u662f\u548cstatic\u5c5e\u6027\u606f\u606f\u76f8\u5173\u7684\uff0c\u5f53\u6211\u4eec\u6ce8\u5165static\u5c5e\u6027\u7684\u65f6\u5019\u8981\u544a\u77e5Guice\u6211\u4eec\u5177\u4f53\u4f7f\u7528static\u5c5e\u6027\u7684\u7236\u7c7b\uff0c\u8fd9\u6837Guice\u624d\u53ef\u4ee5\u5e2e\u6211\u4eec\u6ce8\u5165\u8fdb\u6765\u3002 \u7ec6\u5fc3\u7684\u8bdd\u4f1a\u60f3\u5230\u6211\u4eec\u65e2\u7136\u4f7f\u7528 binder.requestStaticInjection \u65b9\u5f0f\u6ce8\u5165static\u5c5e\u6027\uff0c\u90a3\u4e48\u975estatic\u5c5e\u6027\u662f\u4e0d\u662f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u7684\u65b9\u5f0f\u6ce8\u5165\uff1f \u7b54\u6848\u662f\u53ef\u4ee5\u7684\uff0c\u975estatic\u7684\u5c5e\u6027\u6211\u4eec\u9700\u8981\u901a\u8fc7 binder.requestInjection(Type); \u65b9\u5f0f\u6ce8\u5165\uff0c\u5b9e\u4f8b\u5982\u4e0b\uff1a \u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceNonStatic**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; public class TestGuiceNonStatic { @Inject private GuiceConstructorService service ; public static void main ( String [] args ) { TestGuiceNonStatic applicationBinder = new TestGuiceNonStatic (); Guice . createInjector ( binder -> binder . requestInjection ( applicationBinder )); applicationBinder . service . print ( \"Non Static\" ); } } \u8fd0\u884c\u7a0b\u5e8f\u540e\uff0c\u8f93\u51fa\u4ee5\u4e0b\u7ed3\u679c Hello Guice Binder For Constructor, Non Static \u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7 Guice.createInjector().injectMembers(new Object()); \u65b9\u5f0f\u6ce8\u5165\u3002 \u6ce8\u610f\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4e3b\u7c7b\u7684\u5b9e\u4f8b\u624d\u53ef\u4ee5\u6ce8\u5165\uff0c\u4f7f\u7528TestGuiceNonStatic.class\u662f\u65e0\u6cd5\u6ce8\u5165\u7684 \u6e90\u7801\u5730\u5740 \u00b6 GitHub","title":"Guice\u4f9d\u8d56\u6ce8\u5165(\u6784\u9020\u51fd\u6570)"},{"location":"Google/Guice/2021-08-18-guice-binder-constructor/#_1","text":"\u6280\u672f \u7248\u672c Java 1.8+ Guice 4.2.3","title":"\u57fa\u7840\u73af\u5883"},{"location":"Google/Guice/2021-08-18-guice-binder-constructor/#_2","text":"\u521d\u59cb\u5316\u9879\u76ee mvn archetype:generate -DgroupId = io.edurt.lc.guice -DartifactId = guice-binder-constructor -DarchetypeArtifactId = maven-archetype-quickstart -Dversion = 1 .0.0 -DinteractiveMode = false \u4fee\u6539pom.xml\u589e\u52a0Guice\u4f9d\u8d56 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> lc-guice </artifactId> <groupId> io.edurt.lc.guice </groupId> <version> 1.0.0 </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> guice-binder-constructor </artifactId> <name> Learning Center for Guice Binder(Constructor) </name> <properties> <maven.compiler.source> 1.8 </maven.compiler.source> <maven.compiler.target> 1.8 </maven.compiler.target> </properties> <dependencies> <dependency> <groupId> com.google.inject </groupId> <artifactId> guice </artifactId> <version> 4.2.3 </version> </dependency> <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> <scope> test </scope> </dependency> </dependencies> </project> guice : guice\u5c31\u662f\u6211\u4eec\u6838\u5fc3\u8981\u4f7f\u7528\u7684\u4f9d\u8d56","title":"\u521d\u59cb\u5316\u9879\u76ee"},{"location":"Google/Guice/2021-08-18-guice-binder-constructor/#_3","text":"\u5728Guice\u4e2d\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u9700\u8981\u7684\u5b9e\u4f53\u4fe1\u606f\u901a\u8fc7\u6784\u9020\u51fd\u6570\u76f4\u63a5\u6ce8\u5165\u5230\u6211\u4eec\u9700\u8981\u7684\u4efb\u610f\u5730\u65b9\uff0c\u6211\u4eec\u901a\u8fc7\u5217\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u6765\u5b9e\u9645\u8bf4\u660e\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceConstructorService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.ImplementedBy ; @ImplementedBy ( GuiceConstructorServiceImpl . class ) public interface GuiceConstructorService { void print ( String source ); } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceConstructorServiceImpl**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public class GuiceConstructorServiceImpl implements GuiceConstructorService { @Override public void print ( String source ) { System . out . println ( String . format ( \"Hello Guice Binder For Constructor, %s\" , source )); } } \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceConstructor**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; public class TestGuiceConstructor { private GuiceConstructorService service ; @Inject public TestGuiceConstructor ( GuiceConstructorService service ) { this . service = service ; } public GuiceConstructorService getService () { return service ; } public static void main ( String [] args ) { TestGuiceConstructor test = Guice . createInjector (). getInstance ( TestGuiceConstructor . class ); test . getService (). print ( \"Test Case 1\" ); } } \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Hello Guice Binder For Constructor, Test Case 1 \u8fd9\u4e2a\u793a\u4f8b\u5f88\u597d\u7406\u89e3\uff0c\u5b9e\u9645\u5c31\u662f\u8bf4\u6211\u4eec\u5c06 GuiceConstructorService \u63a5\u53e3\u901a\u8fc7 @Inject \u6ce8\u5165\u5230\u4e86 TestGuiceConstructor \u5e94\u7528\u4e2d\u3002\u5f53\u7136\u6211\u4eec\u901a\u8fc7 @ImplementedBy(GuiceConstructorServiceImpl.class) \u5b9e\u73b0\u4e86\u7c7b\u4f3c GuiceConstructorService service = new GuiceConstructorServiceImpl() \u7684\u64cd\u4f5c\uff0c\u4e0d\u8fc7\u6bcf\u6b21\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\uff0c\u5982\u679c\u9700\u8981\u5355\u4f8b\u6a21\u5f0f\u7684\u8bdd\uff0c\u9700\u8981\u5355\u72ec\u64cd\u4f5c\u3002 \u6ce8\u610f\uff1a\u5728\u672c\u6b21\u7a0b\u5e8f\u4e2d\u6211\u4eec\u5e76\u6ca1\u6709\u901a\u8fc7Module\u5173\u8054\u5230Guice\uff0c\u65b9\u4fbf\u6211\u4eec\u5feb\u901f\u6d4b\u8bd5\u5e94\u7528\u7b49\u3002 \u6211\u4eec\u65e0\u6cd5\u901a\u8fc7\u975eGuice\u5bb9\u5668\u8fdb\u884c\u6ce8\u5165\uff0c\u4ee5\u4e0b\u5c31\u662f\u4e00\u4e2a\u9519\u8bef\u7684\u793a\u4f8b static\u4e5f\u662f\u65e0\u6cd5\u8fdb\u884c\u6ce8\u5165\u7684 package io.edurt.lc.guice ; import com.google.inject.Inject ; public class TestGuiceConstructorNo { @Inject private GuiceConstructorService service ; public GuiceConstructorService getService () { return service ; } public static void main ( String [] args ) { TestGuiceConstructorNo test = new TestGuiceConstructorNo (); test . getService (). print ( \"Test Case 1\" ); } } \u6211\u4eec\u8fd0\u884c\u4e0a\u8ff0\u4ee3\u7801\uff0c\u4f1a\u63d0\u793a\u4ee5\u4e0b\u9519\u8bef\u4fe1\u606f Exception in thread \"main\" java.lang.NullPointerException at io.edurt.lc.guice.TestGuiceConstructorNo.main ( TestGuiceConstructorNo.java:18 ) \u8fd9\u4e5f\u5c31\u8bf4\u660e\u6211\u4eec\u65e0\u6cd5\u5728\u975eGuice\u5bb9\u5668\u4e2d\u8fdb\u884c\u5b9e\u4f8b\u6ce8\u5165","title":"\u6784\u9020\u51fd\u6570\u6ce8\u5165"},{"location":"Google/Guice/2021-08-18-guice-binder-constructor/#_4","text":"\u4e0a\u8ff0\u5b9e\u4f8b\u6211\u4eec\u53ea\u662f\u6ce8\u5165\u4e86\u4e00\u4e2a\u53c2\u6570\uff0c\u90a3\u6211\u4eec\u5c1d\u8bd5\u4e00\u4e0b\u591a\u53c2\u6570\u6ce8\u5165\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceConstructorTwoService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.ImplementedBy ; @ImplementedBy ( GuiceConstructorTwoServiceImpl . class ) public interface GuiceConstructorTwoService { void print (); } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceConstructorTwoServiceImpl**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public class GuiceConstructorTwoServiceImpl implements GuiceConstructorTwoService { @Override public void print () { System . out . println ( String . format ( \"Hello Guice Binder For Constructor Two\" )); } } \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceConstructorMultiple**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; public class TestGuiceConstructorMultiple { private GuiceConstructorService service ; private GuiceConstructorTwoService twoService ; public GuiceConstructorService getService () { return service ; } public void setService ( GuiceConstructorService service ) { this . service = service ; } public GuiceConstructorTwoService getTwoService () { return twoService ; } public void setTwoService ( GuiceConstructorTwoService twoService ) { this . twoService = twoService ; } @Inject public TestGuiceConstructorMultiple ( GuiceConstructorService service , GuiceConstructorTwoService twoService ) { this . service = service ; this . twoService = twoService ; } public static void main ( String [] args ) { TestGuiceConstructorMultiple multiple = Guice . createInjector (). getInstance ( TestGuiceConstructorMultiple . class ); multiple . getService (). print ( \"One\" ); multiple . getTwoService (). print (); } } \u8fd0\u884c\u7a0b\u5e8f\u540e\uff0c\u8f93\u51fa\u4ee5\u4e0b\u7ed3\u679c Hello Guice Binder For Constructor, One Hello Guice Binder For Constructor Two \u6211\u4eec\u4f7f\u7528\u4e00\u4e2a @Inject \u4e5f\u80fd\u5b9e\u73b0\u591a\u4e2a\u53c2\u6570\u7684\u5b9e\u4f8b\u6ce8\u5165\uff0c\u5f53\u7136\u8fd8\u652f\u6301Set\u65b9\u5f0f\u6ce8\u5165\uff0c\u53ea\u9700\u8981\u5728\u53c2\u6570\u7684set\u65b9\u6cd5\u4e0a\u589e\u52a0 @Inject \u6ce8\u89e3\u5373\u53ef\u5b9e\u73b0\uff0c\u8fd9\u91cc\u6211\u4eec\u4e0d\u591a\u505a\u53d9\u8ff0\uff0c\u53ef\u81ea\u884c\u5b9e\u9a8c\u3002","title":"\u591a\u53c2\u6570\u6ce8\u5165"},{"location":"Google/Guice/2021-08-18-guice-binder-constructor/#static","text":"\u6211\u4eec\u8bf4\u8fc7\u65e0\u6cd5\u901a\u8fc7static\u5c5e\u6027\u76f4\u63a5\u8fdb\u884c\u6ce8\u5165\u4f7f\u7528\uff0c\u65b9\u6cd5\u603b\u662f\u5f88\u591a\u7684\uff0cGuice\u63d0\u4f9b\u4e86\u4ee5\u4e0bstatic\u6ce8\u5165\u65b9\u5f0f. \u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceStatic**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; public class TestGuiceStatic { @Inject private static GuiceConstructorService service ; public static void main ( String [] args ) { Guice . createInjector ( binder -> binder . requestStaticInjection ( TestGuiceStatic . class )); TestGuiceStatic . service . print ( \"Static\" ); } } \u8fd0\u884c\u7a0b\u5e8f\u540e\uff0c\u8f93\u51fa\u4ee5\u4e0b\u7ed3\u679c Hello Guice Binder For Constructor, Static \u5728\u4ee3\u7801\u4e2d\u6211\u4eec\u6ca1\u6709\u5411\u4ee5\u4e0a\u4e24\u4e2a\u793a\u4f8b\u76f4\u63a5\u4f7f\u7528 Guice \u83b7\u53d6\u5b9e\u4f8b\uff0c\u800c\u662f\u4f7f\u7528\u4e86 binder.requestStaticInjection \u65b9\u5f0f\u8fdb\u884c\u4e86\u6ce8\u5165\uff0c\u8fd9\u4e2a\u662f\u548cstatic\u5c5e\u6027\u606f\u606f\u76f8\u5173\u7684\uff0c\u5f53\u6211\u4eec\u6ce8\u5165static\u5c5e\u6027\u7684\u65f6\u5019\u8981\u544a\u77e5Guice\u6211\u4eec\u5177\u4f53\u4f7f\u7528static\u5c5e\u6027\u7684\u7236\u7c7b\uff0c\u8fd9\u6837Guice\u624d\u53ef\u4ee5\u5e2e\u6211\u4eec\u6ce8\u5165\u8fdb\u6765\u3002 \u7ec6\u5fc3\u7684\u8bdd\u4f1a\u60f3\u5230\u6211\u4eec\u65e2\u7136\u4f7f\u7528 binder.requestStaticInjection \u65b9\u5f0f\u6ce8\u5165static\u5c5e\u6027\uff0c\u90a3\u4e48\u975estatic\u5c5e\u6027\u662f\u4e0d\u662f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u7684\u65b9\u5f0f\u6ce8\u5165\uff1f \u7b54\u6848\u662f\u53ef\u4ee5\u7684\uff0c\u975estatic\u7684\u5c5e\u6027\u6211\u4eec\u9700\u8981\u901a\u8fc7 binder.requestInjection(Type); \u65b9\u5f0f\u6ce8\u5165\uff0c\u5b9e\u4f8b\u5982\u4e0b\uff1a \u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceNonStatic**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; public class TestGuiceNonStatic { @Inject private GuiceConstructorService service ; public static void main ( String [] args ) { TestGuiceNonStatic applicationBinder = new TestGuiceNonStatic (); Guice . createInjector ( binder -> binder . requestInjection ( applicationBinder )); applicationBinder . service . print ( \"Non Static\" ); } } \u8fd0\u884c\u7a0b\u5e8f\u540e\uff0c\u8f93\u51fa\u4ee5\u4e0b\u7ed3\u679c Hello Guice Binder For Constructor, Non Static \u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7 Guice.createInjector().injectMembers(new Object()); \u65b9\u5f0f\u6ce8\u5165\u3002 \u6ce8\u610f\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4e3b\u7c7b\u7684\u5b9e\u4f8b\u624d\u53ef\u4ee5\u6ce8\u5165\uff0c\u4f7f\u7528TestGuiceNonStatic.class\u662f\u65e0\u6cd5\u6ce8\u5165\u7684","title":"static\u9759\u6001\u53c2\u6570\u6ce8\u5165"},{"location":"Google/Guice/2021-08-18-guice-binder-constructor/#_5","text":"GitHub","title":"\u6e90\u7801\u5730\u5740"},{"location":"Google/Guice/2021-08-26-guice-binder-multiple/","text":"\u672c\u6587\u7ae0\u4e3b\u8981\u8be6\u7ec6\u8bb2\u89e3Guice\u4f9d\u8d56\u6ce8\u5165\u4e2d\u7684\u7279\u6027\u63a5\u53e3\u591a\u5b9e\u73b0\uff0c\u4e00\u822c\u4f7f\u7528\u5230guice\u7684\u6846\u67b6\u7684\u63d2\u4ef6\u673a\u5236\u90fd\u662f\u57fa\u4e8e\u8be5\u65b9\u5f0f\u5b9e\u73b0\u3002 \u57fa\u7840\u73af\u5883 \u00b6 \u6280\u672f \u7248\u672c Java 1.8+ Guice 4.2.3 \u521d\u59cb\u5316\u9879\u76ee \u00b6 \u521d\u59cb\u5316\u9879\u76ee mvn archetype:generate -DgroupId = io.edurt.lc.guice -DartifactId = guice-binder-multiple -DarchetypeArtifactId = maven-archetype-quickstart -Dversion = 1 .0.0 -DinteractiveMode = false \u4fee\u6539pom.xml\u589e\u52a0Guice\u4f9d\u8d56 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> lc-guice </artifactId> <groupId> io.edurt.lc.guice </groupId> <version> 1.0.0 </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> guice-binder-multiple </artifactId> <name> Learning Center for Guice Binder(Multiple Service) </name> <properties> <maven.compiler.source> 1.8 </maven.compiler.source> <maven.compiler.target> 1.8 </maven.compiler.target> </properties> <dependencies> <dependency> <groupId> com.google.inject </groupId> <artifactId> guice </artifactId> <version> 4.2.3 </version> </dependency> <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> <scope> test </scope> </dependency> </dependencies> </project> guice : guice\u5c31\u662f\u6211\u4eec\u6838\u5fc3\u8981\u4f7f\u7528\u7684\u4f9d\u8d56 \u63a5\u53e3\u591a\u5b9e\u73b0\u6ce8\u5165 \u00b6 \u5982\u679c\u4e00\u4e2a\u63a5\u53e3\u6709\u591a\u4e2a\u5b9e\u73b0\uff0c\u5982\u679c\u5355\u5355\u901a\u8fc7 @Inject \u548c Module \u90fd\u96be\u4ee5\u76f4\u63a5\u5b9e\u73b0\uff0c\u4f46\u591a\u5b9e\u73b0\u662f\u7ecf\u5e38\u4f1a\u51fa\u73b0\u7684\uff0cGuice\u63d0\u4f9b\u4e86\u5176\u5b83\u6ce8\u5165\u65b9\u5f0f\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public interface GuiceService { void println ( String input ); } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceJavaService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public class GuiceJavaService implements GuiceService { @Override public void println ( String input ) { System . out . println ( String . format ( \"Java %s\" , input )); } } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuicePythonService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public class GuicePythonService implements GuiceService { @Override public void println ( String input ) { System . out . println ( String . format ( \"Python %s\" , input )); } } \u521b\u5efa src/main/java \u76ee\u5f55\u4e0b\u521b\u5efa**io.edurt.lc.guice.annotation.Java**\u548c**io.edurt.lc.guice.annotation.Python**\u6ce8\u89e3\u7c7b\uff0c\u7528\u4e8e\u63d0\u4f9bguice\u6846\u67b6\u6807\u8bc6 **io.edurt.lc.guice.annotation.Java**\u6587\u4ef6\u5185\u5bb9 package io.edurt.lc.guice.annotation ; import com.google.inject.BindingAnnotation ; import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Retention ( RetentionPolicy . RUNTIME ) @Target ({ ElementType . FIELD , ElementType . PARAMETER }) @BindingAnnotation public @interface Java { } **io.edurt.lc.guice.annotation.Python**\u6587\u4ef6\u5185\u5bb9 package io.edurt.lc.guice.annotation ; import com.google.inject.BindingAnnotation ; import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Retention ( RetentionPolicy . RUNTIME ) @Target ({ ElementType . FIELD , ElementType . PARAMETER }) @BindingAnnotation public @interface Python { } \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceMultiple**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; import io.edurt.lc.guice.annotation.Java ; import io.edurt.lc.guice.annotation.Python ; public class TestGuiceMultiple { @Inject @Java public GuiceService java ; @Inject @Python public GuiceService python ; public static void main ( String [] args ) { TestGuiceMultiple application = Guice . createInjector ( binder -> { binder . bind ( GuiceService . class ). annotatedWith ( Java . class ). to ( GuiceJavaService . class ); binder . bind ( GuiceService . class ). annotatedWith ( Python . class ). to ( GuicePythonService . class ); }). getInstance ( TestGuiceMultiple . class ); application . java . println ( \"Hello Java Implement\" ); application . python . println ( \"Hello Python Implement\" ); } } \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Java Hello Java Implement Python Hello Python Implement \u6211\u4eec\u6ce8\u610f\u770b binder \u7684\u914d\u7f6e\u4e2d\uff0c\u6211\u4eec\u5c06\u6ce8\u89e3\u4e0e\u5b9e\u9645\u7684\u5b9e\u73b0\u7c7b\u7ed1\u5b9a\u5230\u4e86\u4e00\u8d77\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u7ed1\u5b9a\u591a\u63a5\u53e3\u5b9e\u73b0\u7684\u529f\u80fd\u3002 \u6ce8\u610f\uff1a\u5728\u672c\u6b21\u7a0b\u5e8f\u4e2d\u6211\u4eec\u4f7f\u7528\u7684\u662flambda\u8868\u8fbe\u5f0f\u8fdb\u884c\u7684\u4ee3\u7801\u7f16\u7a0b\uff0c\u9700\u8981jdk1.8\u53ca\u4ee5\u4e0a\u7248\u672c \u9759\u6001\u4ee3\u7801\u6ce8\u5165 \u00b6 \u6211\u4eec\u5982\u679c\u9700\u8981\u8fdb\u884c\u9759\u6001\u4ee3\u7801\u6ce8\u5165\u670d\u52a1\u8be5\u600e\u4e48\u5199\u5462\uff1f\u6211\u4eec\u53c2\u7167\u4ee5\u524d\u8bb2\u89e3\u7684 Guice\u4f9d\u8d56\u6ce8\u5165(\u6784\u9020\u51fd\u6570\u6ce8\u5165) \u8d44\u6e90\u4e2d\uff0c\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceMultipleStatic**\u7c7b\u8fdb\u884cstatic\u7684\u6ce8\u5165\uff0c\u4ee3\u7801\u5982\u4e0b package io.edurt.lc.guice ; import com.google.inject.Inject ; import io.edurt.lc.guice.annotation.Java ; import io.edurt.lc.guice.annotation.Python ; public class TestGuiceMultipleStatic { @Inject @Java public static GuiceService java ; @Inject @Python public static GuiceService python ; public static void main ( String [] args ) { com . google . inject . Guice . createInjector ( binder -> { binder . bind ( GuiceService . class ). annotatedWith ( Java . class ). to ( GuiceJavaService . class ); binder . bind ( GuiceService . class ). annotatedWith ( Python . class ). to ( GuicePythonService . class ); binder . requestStaticInjection ( TestGuiceMultipleStatic . class ); }); TestGuiceMultipleStatic . java . println ( \"Hello Java Static Bind\" ); TestGuiceMultipleStatic . python . println ( \"Hello Python Static Bind\" ); } } \u6211\u4eec\u53ea\u9700\u8981\u5728binder\u9636\u6bb5\u5c06\u6211\u4eec\u7684\u4e3b\u7c7b\u6ce8\u5165\u5230guice\u5bb9\u5668\u4e2d\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u770b\u5230\u7684 binder.requestStaticInjection(TestGuiceMultipleStatic.class); \u4ee3\u7801\uff0c\u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Java Hello Java Static Bind Python Hello Python Static Bind \u4f7f\u7528@Named\u6ce8\u89e3\u7ed1\u5b9a \u00b6 \u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceMultipleNamed**\u7c7b,\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; public class TestGuiceMultipleNamed { @Inject public GuiceService java ; @Inject public GuiceService python ; public static void main ( String [] args ) { TestGuiceMultipleNamed application = Guice . createInjector ( binder -> { binder . bind ( GuiceService . class ). to ( GuiceJavaService . class ); binder . bind ( GuiceService . class ). to ( GuicePythonService . class ); }). getInstance ( TestGuiceMultipleNamed . class ); application . java . println ( \"Hello Java Named Implement\" ); application . python . println ( \"Hello Python Named Implement\" ); } } \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Exception in thread \"main\" com.google.inject.CreationException: Unable to create injector, see the following errors: 1 ) A binding to io.edurt.lc.guice.GuiceService was already configured at io.edurt.lc.guice.TestGuiceMultipleNamed.lambda $main$0 ( TestGuiceMultipleNamed.java:17 ) . at io.edurt.lc.guice.TestGuiceMultipleNamed.lambda $main$0 ( TestGuiceMultipleNamed.java:18 ) 1 error at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist ( Errors.java:554 ) at com.google.inject.internal.InternalInjectorCreator.initializeStatically ( InternalInjectorCreator.java:161 ) at com.google.inject.internal.InternalInjectorCreator.build ( InternalInjectorCreator.java:108 ) at com.google.inject.Guice.createInjector ( Guice.java:87 ) at com.google.inject.Guice.createInjector ( Guice.java:69 ) at com.google.inject.Guice.createInjector ( Guice.java:59 ) at io.edurt.lc.guice.TestGuiceMultipleNamed.main ( TestGuiceMultipleNamed.java:16 ) \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86\u5c5e\u6027\u7ed1\u5b9a\u4e86\u591a\u63a5\u53e3\u5b9e\u73b0\uff0c\u5bfc\u81f4guice\u65e0\u6cd5\u8bc6\u522b\u5177\u4f53\u662f\u54ea\u4e2a\u5b9e\u73b0\u7c7b\uff0c\u4e0d\u8fc7guice\u662f\u5f3a\u5927\u7684\u8fd9\u79cd\u95ee\u9898\u4e5f\u88ab\u8003\u8651\u5230\u4e86\uff0c\u53ea\u9700\u8981\u4f7f\u7528 @Named \u6a21\u677f\u751f\u6210\u6ce8\u89e3\u5373\u53ef\u89e3\u51b3\uff0c\u6211\u4eec\u5c06\u4ee3\u7801\u4fee\u6539\u4e3a\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; import com.google.inject.name.Named ; import com.google.inject.name.Names ; public class TestGuiceMultipleNamed { @Inject @Named ( \"Java\" ) public GuiceService java ; @Inject @Named ( \"Python\" ) public GuiceService python ; public static void main ( String [] args ) { TestGuiceMultipleNamed application = Guice . createInjector ( binder -> { binder . bind ( GuiceService . class ). annotatedWith ( Names . named ( \"Java\" )). to ( GuiceJavaService . class ); binder . bind ( GuiceService . class ). annotatedWith ( Names . named ( \"Python\" )). to ( GuicePythonService . class ); }). getInstance ( TestGuiceMultipleNamed . class ); application . java . println ( \"Hello Java Named Implement\" ); application . python . println ( \"Hello Python Named Implement\" ); } } \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Java Hello Java Named Implement Python Hello Python Named Implement \u8fd9\u4e2a\u793a\u4f8b\u4e5f\u5f88\u597d\u7406\u89e3\uff0c\u5176\u5b9e\u6211\u4eec\u53ea\u662f\u505a\u4e86\u4e24\u6b65\u64cd\u4f5c \u5728\u7ed1\u5b9a\u5b9e\u73b0\u7684\u65f6\u5019\u4f7f\u7528 annotatedWith(Names.named(\"Java\")) \u8fdb\u884c\u5bf9\u8be5\u670d\u52a1\u5b9e\u73b0\u505a\u540d\u79f0\u6807\u5fd7 \u5728\u9700\u8981\u4f7f\u7528\u670d\u52a1\u5b9e\u73b0\u7684\u5730\u65b9\u4f7f\u7528 @Named(\"Java\") \u8fdb\u884c\u670d\u52a1\u7684\u5f15\u7528\u5373\u53ef \u6e90\u7801\u5730\u5740 \u00b6 GitHub","title":"Guice\u4f9d\u8d56\u6ce8\u5165(\u63a5\u53e3\u591a\u5b9e\u73b0)"},{"location":"Google/Guice/2021-08-26-guice-binder-multiple/#_1","text":"\u6280\u672f \u7248\u672c Java 1.8+ Guice 4.2.3","title":"\u57fa\u7840\u73af\u5883"},{"location":"Google/Guice/2021-08-26-guice-binder-multiple/#_2","text":"\u521d\u59cb\u5316\u9879\u76ee mvn archetype:generate -DgroupId = io.edurt.lc.guice -DartifactId = guice-binder-multiple -DarchetypeArtifactId = maven-archetype-quickstart -Dversion = 1 .0.0 -DinteractiveMode = false \u4fee\u6539pom.xml\u589e\u52a0Guice\u4f9d\u8d56 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> lc-guice </artifactId> <groupId> io.edurt.lc.guice </groupId> <version> 1.0.0 </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> guice-binder-multiple </artifactId> <name> Learning Center for Guice Binder(Multiple Service) </name> <properties> <maven.compiler.source> 1.8 </maven.compiler.source> <maven.compiler.target> 1.8 </maven.compiler.target> </properties> <dependencies> <dependency> <groupId> com.google.inject </groupId> <artifactId> guice </artifactId> <version> 4.2.3 </version> </dependency> <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> <scope> test </scope> </dependency> </dependencies> </project> guice : guice\u5c31\u662f\u6211\u4eec\u6838\u5fc3\u8981\u4f7f\u7528\u7684\u4f9d\u8d56","title":"\u521d\u59cb\u5316\u9879\u76ee"},{"location":"Google/Guice/2021-08-26-guice-binder-multiple/#_3","text":"\u5982\u679c\u4e00\u4e2a\u63a5\u53e3\u6709\u591a\u4e2a\u5b9e\u73b0\uff0c\u5982\u679c\u5355\u5355\u901a\u8fc7 @Inject \u548c Module \u90fd\u96be\u4ee5\u76f4\u63a5\u5b9e\u73b0\uff0c\u4f46\u591a\u5b9e\u73b0\u662f\u7ecf\u5e38\u4f1a\u51fa\u73b0\u7684\uff0cGuice\u63d0\u4f9b\u4e86\u5176\u5b83\u6ce8\u5165\u65b9\u5f0f\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public interface GuiceService { void println ( String input ); } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceJavaService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public class GuiceJavaService implements GuiceService { @Override public void println ( String input ) { System . out . println ( String . format ( \"Java %s\" , input )); } } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuicePythonService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public class GuicePythonService implements GuiceService { @Override public void println ( String input ) { System . out . println ( String . format ( \"Python %s\" , input )); } } \u521b\u5efa src/main/java \u76ee\u5f55\u4e0b\u521b\u5efa**io.edurt.lc.guice.annotation.Java**\u548c**io.edurt.lc.guice.annotation.Python**\u6ce8\u89e3\u7c7b\uff0c\u7528\u4e8e\u63d0\u4f9bguice\u6846\u67b6\u6807\u8bc6 **io.edurt.lc.guice.annotation.Java**\u6587\u4ef6\u5185\u5bb9 package io.edurt.lc.guice.annotation ; import com.google.inject.BindingAnnotation ; import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Retention ( RetentionPolicy . RUNTIME ) @Target ({ ElementType . FIELD , ElementType . PARAMETER }) @BindingAnnotation public @interface Java { } **io.edurt.lc.guice.annotation.Python**\u6587\u4ef6\u5185\u5bb9 package io.edurt.lc.guice.annotation ; import com.google.inject.BindingAnnotation ; import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Retention ( RetentionPolicy . RUNTIME ) @Target ({ ElementType . FIELD , ElementType . PARAMETER }) @BindingAnnotation public @interface Python { } \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceMultiple**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; import io.edurt.lc.guice.annotation.Java ; import io.edurt.lc.guice.annotation.Python ; public class TestGuiceMultiple { @Inject @Java public GuiceService java ; @Inject @Python public GuiceService python ; public static void main ( String [] args ) { TestGuiceMultiple application = Guice . createInjector ( binder -> { binder . bind ( GuiceService . class ). annotatedWith ( Java . class ). to ( GuiceJavaService . class ); binder . bind ( GuiceService . class ). annotatedWith ( Python . class ). to ( GuicePythonService . class ); }). getInstance ( TestGuiceMultiple . class ); application . java . println ( \"Hello Java Implement\" ); application . python . println ( \"Hello Python Implement\" ); } } \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Java Hello Java Implement Python Hello Python Implement \u6211\u4eec\u6ce8\u610f\u770b binder \u7684\u914d\u7f6e\u4e2d\uff0c\u6211\u4eec\u5c06\u6ce8\u89e3\u4e0e\u5b9e\u9645\u7684\u5b9e\u73b0\u7c7b\u7ed1\u5b9a\u5230\u4e86\u4e00\u8d77\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u7ed1\u5b9a\u591a\u63a5\u53e3\u5b9e\u73b0\u7684\u529f\u80fd\u3002 \u6ce8\u610f\uff1a\u5728\u672c\u6b21\u7a0b\u5e8f\u4e2d\u6211\u4eec\u4f7f\u7528\u7684\u662flambda\u8868\u8fbe\u5f0f\u8fdb\u884c\u7684\u4ee3\u7801\u7f16\u7a0b\uff0c\u9700\u8981jdk1.8\u53ca\u4ee5\u4e0a\u7248\u672c","title":"\u63a5\u53e3\u591a\u5b9e\u73b0\u6ce8\u5165"},{"location":"Google/Guice/2021-08-26-guice-binder-multiple/#_4","text":"\u6211\u4eec\u5982\u679c\u9700\u8981\u8fdb\u884c\u9759\u6001\u4ee3\u7801\u6ce8\u5165\u670d\u52a1\u8be5\u600e\u4e48\u5199\u5462\uff1f\u6211\u4eec\u53c2\u7167\u4ee5\u524d\u8bb2\u89e3\u7684 Guice\u4f9d\u8d56\u6ce8\u5165(\u6784\u9020\u51fd\u6570\u6ce8\u5165) \u8d44\u6e90\u4e2d\uff0c\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceMultipleStatic**\u7c7b\u8fdb\u884cstatic\u7684\u6ce8\u5165\uff0c\u4ee3\u7801\u5982\u4e0b package io.edurt.lc.guice ; import com.google.inject.Inject ; import io.edurt.lc.guice.annotation.Java ; import io.edurt.lc.guice.annotation.Python ; public class TestGuiceMultipleStatic { @Inject @Java public static GuiceService java ; @Inject @Python public static GuiceService python ; public static void main ( String [] args ) { com . google . inject . Guice . createInjector ( binder -> { binder . bind ( GuiceService . class ). annotatedWith ( Java . class ). to ( GuiceJavaService . class ); binder . bind ( GuiceService . class ). annotatedWith ( Python . class ). to ( GuicePythonService . class ); binder . requestStaticInjection ( TestGuiceMultipleStatic . class ); }); TestGuiceMultipleStatic . java . println ( \"Hello Java Static Bind\" ); TestGuiceMultipleStatic . python . println ( \"Hello Python Static Bind\" ); } } \u6211\u4eec\u53ea\u9700\u8981\u5728binder\u9636\u6bb5\u5c06\u6211\u4eec\u7684\u4e3b\u7c7b\u6ce8\u5165\u5230guice\u5bb9\u5668\u4e2d\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u770b\u5230\u7684 binder.requestStaticInjection(TestGuiceMultipleStatic.class); \u4ee3\u7801\uff0c\u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Java Hello Java Static Bind Python Hello Python Static Bind","title":"\u9759\u6001\u4ee3\u7801\u6ce8\u5165"},{"location":"Google/Guice/2021-08-26-guice-binder-multiple/#named","text":"\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceMultipleNamed**\u7c7b,\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; public class TestGuiceMultipleNamed { @Inject public GuiceService java ; @Inject public GuiceService python ; public static void main ( String [] args ) { TestGuiceMultipleNamed application = Guice . createInjector ( binder -> { binder . bind ( GuiceService . class ). to ( GuiceJavaService . class ); binder . bind ( GuiceService . class ). to ( GuicePythonService . class ); }). getInstance ( TestGuiceMultipleNamed . class ); application . java . println ( \"Hello Java Named Implement\" ); application . python . println ( \"Hello Python Named Implement\" ); } } \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Exception in thread \"main\" com.google.inject.CreationException: Unable to create injector, see the following errors: 1 ) A binding to io.edurt.lc.guice.GuiceService was already configured at io.edurt.lc.guice.TestGuiceMultipleNamed.lambda $main$0 ( TestGuiceMultipleNamed.java:17 ) . at io.edurt.lc.guice.TestGuiceMultipleNamed.lambda $main$0 ( TestGuiceMultipleNamed.java:18 ) 1 error at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist ( Errors.java:554 ) at com.google.inject.internal.InternalInjectorCreator.initializeStatically ( InternalInjectorCreator.java:161 ) at com.google.inject.internal.InternalInjectorCreator.build ( InternalInjectorCreator.java:108 ) at com.google.inject.Guice.createInjector ( Guice.java:87 ) at com.google.inject.Guice.createInjector ( Guice.java:69 ) at com.google.inject.Guice.createInjector ( Guice.java:59 ) at io.edurt.lc.guice.TestGuiceMultipleNamed.main ( TestGuiceMultipleNamed.java:16 ) \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86\u5c5e\u6027\u7ed1\u5b9a\u4e86\u591a\u63a5\u53e3\u5b9e\u73b0\uff0c\u5bfc\u81f4guice\u65e0\u6cd5\u8bc6\u522b\u5177\u4f53\u662f\u54ea\u4e2a\u5b9e\u73b0\u7c7b\uff0c\u4e0d\u8fc7guice\u662f\u5f3a\u5927\u7684\u8fd9\u79cd\u95ee\u9898\u4e5f\u88ab\u8003\u8651\u5230\u4e86\uff0c\u53ea\u9700\u8981\u4f7f\u7528 @Named \u6a21\u677f\u751f\u6210\u6ce8\u89e3\u5373\u53ef\u89e3\u51b3\uff0c\u6211\u4eec\u5c06\u4ee3\u7801\u4fee\u6539\u4e3a\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; import com.google.inject.name.Named ; import com.google.inject.name.Names ; public class TestGuiceMultipleNamed { @Inject @Named ( \"Java\" ) public GuiceService java ; @Inject @Named ( \"Python\" ) public GuiceService python ; public static void main ( String [] args ) { TestGuiceMultipleNamed application = Guice . createInjector ( binder -> { binder . bind ( GuiceService . class ). annotatedWith ( Names . named ( \"Java\" )). to ( GuiceJavaService . class ); binder . bind ( GuiceService . class ). annotatedWith ( Names . named ( \"Python\" )). to ( GuicePythonService . class ); }). getInstance ( TestGuiceMultipleNamed . class ); application . java . println ( \"Hello Java Named Implement\" ); application . python . println ( \"Hello Python Named Implement\" ); } } \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u540e,\u63a7\u5236\u53f0\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f: Java Hello Java Named Implement Python Hello Python Named Implement \u8fd9\u4e2a\u793a\u4f8b\u4e5f\u5f88\u597d\u7406\u89e3\uff0c\u5176\u5b9e\u6211\u4eec\u53ea\u662f\u505a\u4e86\u4e24\u6b65\u64cd\u4f5c \u5728\u7ed1\u5b9a\u5b9e\u73b0\u7684\u65f6\u5019\u4f7f\u7528 annotatedWith(Names.named(\"Java\")) \u8fdb\u884c\u5bf9\u8be5\u670d\u52a1\u5b9e\u73b0\u505a\u540d\u79f0\u6807\u5fd7 \u5728\u9700\u8981\u4f7f\u7528\u670d\u52a1\u5b9e\u73b0\u7684\u5730\u65b9\u4f7f\u7528 @Named(\"Java\") \u8fdb\u884c\u670d\u52a1\u7684\u5f15\u7528\u5373\u53ef","title":"\u4f7f\u7528@Named\u6ce8\u89e3\u7ed1\u5b9a"},{"location":"Google/Guice/2021-08-26-guice-binder-multiple/#_5","text":"GitHub","title":"\u6e90\u7801\u5730\u5740"},{"location":"Google/Guice/2021-08-30-guice-binder-provider/","text":"\u57fa\u7840\u73af\u5883 \u00b6 \u6280\u672f \u7248\u672c Java 1.8+ Guice 4.2.3 \u521d\u59cb\u5316\u9879\u76ee \u00b6 \u521d\u59cb\u5316\u9879\u76ee mvn archetype:generate -DgroupId = io.edurt.lc.guice -DartifactId = guice-binder-provider -DarchetypeArtifactId = maven-archetype-quickstart -Dversion = 1 .0.0 -DinteractiveMode = false \u4fee\u6539pom.xml\u589e\u52a0Guice\u4f9d\u8d56 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> lc-guice </artifactId> <groupId> io.edurt.lc.guice </groupId> <version> 1.0.0 </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> guice-binder-provider </artifactId> <name> Learning Center for Guice Binder(Provider) </name> <properties> <maven.compiler.source> 1.8 </maven.compiler.source> <maven.compiler.target> 1.8 </maven.compiler.target> </properties> <dependencies> <dependency> <groupId> com.google.inject </groupId> <artifactId> guice </artifactId> <version> 4.2.3 </version> </dependency> <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> <scope> test </scope> </dependency> </dependencies> </project> guice : guice\u5c31\u662f\u6211\u4eec\u6838\u5fc3\u8981\u4f7f\u7528\u7684\u4f9d\u8d56 \u5b9e\u73b0Provider\u6ce8\u5165 \u00b6 \u5982\u679c\u60f3\u8981\u6ce8\u5165\u4e00\u4e2a\u670d\u52a1\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Provider \u8fdb\u884c\u5b9e\u73b0\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceProviderService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public interface GuiceProviderService { void println ( String input ); } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceProviderServiceImpl**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice.io.edurt.lc.guice ; import io.edurt.lc.guice.GuiceProviderService ; public class GuiceProviderServiceImpl implements GuiceProviderService { @Override public void println ( String input ) { System . out . println ( input ); } } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceProvider**\u7c7b\u6587\u4ef6\u7528\u4e8e\u5b9e\u73b0\u6ce8\u5165,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.Provider ; public class GuiceProvider implements Provider < GuiceProviderService > { @Override public GuiceProviderService get () { return new GuiceProviderServiceImpl (); } } \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceProvider**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; import com.google.inject.Injector ; public class TestGuiceProvider { @Inject private GuiceProviderService providerService ; public static void main ( String [] args ) { Injector injector = Guice . createInjector ( binder -> binder . bind ( GuiceProviderService . class ). toProvider ( GuiceProvider . class )); TestGuiceProvider application = injector . getInstance ( TestGuiceProvider . class ); application . providerService . println ( \"Hello Guice Provider\" ); } } \u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\u8f93\u51fa Hello Guice Provider \u6211\u4eec\u6ce8\u610f\u770b binder \u7684\u914d\u7f6e\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662f toProvider \u5c06\u5b9e\u73b0\u7c7b\u7ed1\u5b9a\u5230\u4e86 Service \u63a5\u53e3\u4e2d\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u5bf9Provider\u7684\u6ce8\u5165\u3002 \u4f7f\u7528 @ProvidedBy \u6ce8\u89e3\u7ed1\u5b9a \u00b6 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceAutoProviderService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.ProvidedBy ; @ProvidedBy ( value = GuiceAutoProvider . class ) public interface GuiceAutoProviderService { void println ( String input ); } \u6ce8\u610f\u6211\u4eec\u4f7f\u7528 @ProvidedBy \u6807\u5fd7\u4e86\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0\u81ea\u52a8\u6ce8\u5165\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceAutoProviderServiceImpl**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public class GuiceAutoProviderServiceImpl implements GuiceAutoProviderService { @Override public void println ( String input ) { System . out . println ( input ); } } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceAutoProvider**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.Provider ; public class GuiceAutoProvider implements Provider < GuiceAutoProviderService > { @Override public GuiceAutoProviderService get () { return new GuiceAutoProviderServiceImpl (); } } \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceAutoProvider**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; public class TestGuiceAutoProvider { @Inject private GuiceAutoProviderService autoProviderService ; public static void main ( String [] args ) { TestGuiceAutoProvider application = Guice . createInjector (). getInstance ( TestGuiceAutoProvider . class ); application . autoProviderService . println ( \"Hello Auto Guice Provider\" ); } } \u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\u8f93\u51fa Hello Auto Guice Provider \u5728\u4ee3\u7801\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u6ca1\u6709\u53bb\u7ed1\u5b9aModule\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u6ce8\u5165\u3002 \u6e90\u7801\u5730\u5740 \u00b6 GitHub","title":"Guice\u4f9d\u8d56\u6ce8\u5165(Provider)"},{"location":"Google/Guice/2021-08-30-guice-binder-provider/#_1","text":"\u6280\u672f \u7248\u672c Java 1.8+ Guice 4.2.3","title":"\u57fa\u7840\u73af\u5883"},{"location":"Google/Guice/2021-08-30-guice-binder-provider/#_2","text":"\u521d\u59cb\u5316\u9879\u76ee mvn archetype:generate -DgroupId = io.edurt.lc.guice -DartifactId = guice-binder-provider -DarchetypeArtifactId = maven-archetype-quickstart -Dversion = 1 .0.0 -DinteractiveMode = false \u4fee\u6539pom.xml\u589e\u52a0Guice\u4f9d\u8d56 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> lc-guice </artifactId> <groupId> io.edurt.lc.guice </groupId> <version> 1.0.0 </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> guice-binder-provider </artifactId> <name> Learning Center for Guice Binder(Provider) </name> <properties> <maven.compiler.source> 1.8 </maven.compiler.source> <maven.compiler.target> 1.8 </maven.compiler.target> </properties> <dependencies> <dependency> <groupId> com.google.inject </groupId> <artifactId> guice </artifactId> <version> 4.2.3 </version> </dependency> <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> <scope> test </scope> </dependency> </dependencies> </project> guice : guice\u5c31\u662f\u6211\u4eec\u6838\u5fc3\u8981\u4f7f\u7528\u7684\u4f9d\u8d56","title":"\u521d\u59cb\u5316\u9879\u76ee"},{"location":"Google/Guice/2021-08-30-guice-binder-provider/#provider","text":"\u5982\u679c\u60f3\u8981\u6ce8\u5165\u4e00\u4e2a\u670d\u52a1\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Provider \u8fdb\u884c\u5b9e\u73b0\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceProviderService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public interface GuiceProviderService { void println ( String input ); } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceProviderServiceImpl**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice.io.edurt.lc.guice ; import io.edurt.lc.guice.GuiceProviderService ; public class GuiceProviderServiceImpl implements GuiceProviderService { @Override public void println ( String input ) { System . out . println ( input ); } } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceProvider**\u7c7b\u6587\u4ef6\u7528\u4e8e\u5b9e\u73b0\u6ce8\u5165,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.Provider ; public class GuiceProvider implements Provider < GuiceProviderService > { @Override public GuiceProviderService get () { return new GuiceProviderServiceImpl (); } } \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceProvider**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; import com.google.inject.Injector ; public class TestGuiceProvider { @Inject private GuiceProviderService providerService ; public static void main ( String [] args ) { Injector injector = Guice . createInjector ( binder -> binder . bind ( GuiceProviderService . class ). toProvider ( GuiceProvider . class )); TestGuiceProvider application = injector . getInstance ( TestGuiceProvider . class ); application . providerService . println ( \"Hello Guice Provider\" ); } } \u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\u8f93\u51fa Hello Guice Provider \u6211\u4eec\u6ce8\u610f\u770b binder \u7684\u914d\u7f6e\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662f toProvider \u5c06\u5b9e\u73b0\u7c7b\u7ed1\u5b9a\u5230\u4e86 Service \u63a5\u53e3\u4e2d\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u5bf9Provider\u7684\u6ce8\u5165\u3002","title":"\u5b9e\u73b0Provider\u6ce8\u5165"},{"location":"Google/Guice/2021-08-30-guice-binder-provider/#providedby","text":"\u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceAutoProviderService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.ProvidedBy ; @ProvidedBy ( value = GuiceAutoProvider . class ) public interface GuiceAutoProviderService { void println ( String input ); } \u6ce8\u610f\u6211\u4eec\u4f7f\u7528 @ProvidedBy \u6807\u5fd7\u4e86\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0\u81ea\u52a8\u6ce8\u5165\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceAutoProviderServiceImpl**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public class GuiceAutoProviderServiceImpl implements GuiceAutoProviderService { @Override public void println ( String input ) { System . out . println ( input ); } } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceAutoProvider**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; import com.google.inject.Provider ; public class GuiceAutoProvider implements Provider < GuiceAutoProviderService > { @Override public GuiceAutoProviderService get () { return new GuiceAutoProviderServiceImpl (); } } \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceAutoProvider**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Inject ; public class TestGuiceAutoProvider { @Inject private GuiceAutoProviderService autoProviderService ; public static void main ( String [] args ) { TestGuiceAutoProvider application = Guice . createInjector (). getInstance ( TestGuiceAutoProvider . class ); application . autoProviderService . println ( \"Hello Auto Guice Provider\" ); } } \u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\u8f93\u51fa Hello Auto Guice Provider \u5728\u4ee3\u7801\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u6ca1\u6709\u53bb\u7ed1\u5b9aModule\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u6ce8\u5165\u3002","title":"\u4f7f\u7528@ProvidedBy\u6ce8\u89e3\u7ed1\u5b9a"},{"location":"Google/Guice/2021-08-30-guice-binder-provider/#_3","text":"GitHub","title":"\u6e90\u7801\u5730\u5740"},{"location":"Google/Guice/2021-09-01-guice-binder-scope/","text":"\u57fa\u7840\u73af\u5883 \u00b6 \u6280\u672f \u7248\u672c Java 1.8+ Guice 4.2.3 \u521d\u59cb\u5316\u9879\u76ee \u00b6 \u521d\u59cb\u5316\u9879\u76ee mvn archetype:generate -DgroupId = io.edurt.lc.guice -DartifactId = guice-binder-scope -DarchetypeArtifactId = maven-archetype-quickstart -Dversion = 1 .0.0 -DinteractiveMode = false \u4fee\u6539pom.xml\u589e\u52a0Guice\u4f9d\u8d56 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> lc-guice </artifactId> <groupId> io.edurt.lc.guice </groupId> <version> 1.0.0 </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> guice-binder-scope </artifactId> <name> Learning Center for Guice Binder(Scope) </name> <properties> <maven.compiler.source> 1.8 </maven.compiler.source> <maven.compiler.target> 1.8 </maven.compiler.target> </properties> <dependencies> <dependency> <groupId> com.google.inject </groupId> <artifactId> guice </artifactId> <version> 4.2.3 </version> </dependency> <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> <scope> test </scope> </dependency> </dependencies> </project> guice : guice\u5c31\u662f\u6211\u4eec\u6838\u5fc3\u8981\u4f7f\u7528\u7684\u4f9d\u8d56 Singleton \u00b6 Guice\u652f\u6301\u6211\u4eec\u5728\u5176\u4ed6DI\u6846\u67b6\u4e2d\u9010\u6e10\u4e60\u60ef\u7684 Scope \u548c Scope \u673a\u5236\u3002Guice\u9ed8\u8ba4\u63d0\u4f9b\u5df2\u5b9a\u4e49\u4f9d\u8d56\u9879\u7684\u65b0\u5b9e\u4f8b\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceScopeService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public interface GuiceScopeService { void println ( String input ); } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceScopeServiceImpl**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public class GuiceScopeServiceImpl implements GuiceScopeService { @Override public void println ( String input ) { System . out . println ( input ); } } \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceScope**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Injector ; import com.google.inject.Scopes ; import org.junit.Test ; public class TestGuiceScope { @Test public void test () { Injector injector = Guice . createInjector ( binder -> binder . bind ( GuiceScopeService . class ). to ( GuiceScopeServiceImpl . class ). in ( Scopes . SINGLETON )); GuiceScopeService service = injector . getInstance ( GuiceScopeService . class ); service . println ( \"Singleton Scope\" ); } } \u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\u8f93\u51fa Singleton Scope \u901a\u8fc7\u4ee3\u7801 binder.bind(GuiceScopeService.class).to(GuiceScopeServiceImpl.class).in(Scopes.SINGLETON) \u6211\u4eec\u6307\u5b9a\u4e86GuiceScopeService\u7684Scope\uff0c\u4ed6\u5c06\u4f1a\u88ab\u6807\u5fd7\u4e3a\u4e00\u4e2a\u5355\u4f8b\u5b9e\u4f8b\u3002\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 @Singleton \u6807\u5fd7\u8be5\u7c7b\u7684\u4f5c\u7528\u57df \u5728 src/test/java \u76ee\u5f55\u521b\u5efa**GuiceScopeServiceAutoImpl**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Singleton ; @Singleton public class GuiceScopeServiceAutoImpl implements GuiceScopeService { @Override public void println ( String input ) { System . out . println ( input ); } } \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceScopeAuto**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Injector ; import org.junit.Test ; public class TestGuiceScopeAuto { @Test public void test () { Injector injector = Guice . createInjector ( binder -> binder . bind ( GuiceScopeService . class ). to ( GuiceScopeServiceAutoImpl . class )); GuiceScopeService service = injector . getInstance ( GuiceScopeService . class ); service . println ( \"Singleton Auto Scope\" ); } } \u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\u8f93\u51fa Singleton Auto Scope \u4e24\u79cd\u65b9\u5f0f\u5b9e\u73b0\u7684\u6548\u679c\u90fd\u662f\u4e00\u81f4\u7684\u3002\u6b64\u65f6 GuiceScopeService \u4f1a\u88ab\u6784\u5efa\u4e3a\u5355\u4f8b\u5b9e\u4f8b\u3002 \u5f53\u7136\u8fd8\u6709\u4e00\u4e2a asEagerSingleton() \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u6765\u6807\u8bb0\u5355\u4f8b\u6a21\u5f0f\u3002 \u4ed6\u4eec\u7684\u5bf9\u6bd4\u56fe\u5982\u4e0b\uff1a \u4f7f\u7528\u65b9\u5f0f PRODUCTION DEVELOPMENT .asEagerSingleton() eager eager .in(Singleton.class) eager lazy .in(Scopes.SINGLETON) eager lazy @Singleton eager* lazy \u81ea\u5b9a\u4e49Scope \u00b6 Guice\u8fd8\u652f\u6301\u6211\u4eec\u7528\u6237\u81ea\u5b9a\u4e49\u4f5c\u7528\u57df\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u6211\u4eec\u4e0d\u9700\u8981\u81ea\u5df1\u5b9e\u73b0Scope\uff0c\u4e00\u822c\u5185\u7f6e\u7684\u4f5c\u7528\u57df\u5bf9\u4e8e\u5927\u591a\u6570\u7684\u5e94\u7528\u5df2\u7ecf\u8db3\u591f\u4e86\u3002\u5982\u679c\u60a8\u6b63\u5728\u7f16\u5199\u4e00\u4e2aweb\u5e94\u7528\u7a0b\u5e8f\uff0c\u90a3\u4e48 ServletModule \u4e3aHTTP\u8bf7\u6c42\u548cHTTP\u4f1a\u8bdd\u63d0\u4f9b\u4e86\u7b80\u5355\u7684\u3001\u826f\u597d\u4f5c\u7528\u57df\u5b9e\u73b0\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u60f3\u6cd5\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.annotation.GuiceCustomScope**\u7c7b\u6587\u4ef6,\u5b9e\u73b0\u81ea\u5b9a\u4e49Scope\u6ce8\u89e3,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 Scope\u6ce8\u89e3\u7528\u4e8e\u6807\u8bb0\u5f53\u524dScope\u5728\u5bb9\u5668\u4e2d\u4f7f\u7528\u7684\u4f5c\u7528\u57df\u3002\u5c06\u4f7f\u7528\u5b83\u6765\u6ce8\u91caguice\u6784\u9020\u7684\u7c7b\u578b\uff0c @Provides \u65b9\u6cd5\u548cbind\u8bed\u6cd5\u4e2d\u7684 in() package io.edurt.lc.guice.annotation ; import com.google.inject.ScopeAnnotation ; import java.lang.annotation.Retention ; import java.lang.annotation.Target ; import static java.lang.annotation.ElementType.METHOD ; import static java.lang.annotation.ElementType.TYPE ; import static java.lang.annotation.RetentionPolicy.RUNTIME ; @Target ({ TYPE , METHOD }) @Retention ( RUNTIME ) @ScopeAnnotation public @interface GuiceCustomScope { } \u5728\u4f7f\u7528\u81ea\u5b9a\u4e49Scope\u65f6\uff0c\u8bf7\u786e\u4fdd\u5bfc\u5165\u4e86\u6b63\u786e\u7684Scope\u6ce8\u89e3\u3002\u5426\u5219\uff0c\u60a8\u53ef\u80fd\u4f1a\u5f97\u5230\u4e00\u4e2a SCOPE_NOT_FOUND \u9519\u8bef\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceCustomScopeImpl**\u7c7b\u6587\u4ef6, \u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 Scope\u63a5\u53e3\u786e\u4fdd\u6bcf\u4e2aScope\u5b9e\u4f8b\u62e5\u6709\u4e00\u5230\u591a\u4e2a\u7c7b\u578b\u5b9e\u4f8b\u3002 package io.edurt.lc.guice ; import com.google.inject.Key ; import com.google.inject.Provider ; import com.google.inject.Scope ; public class GuiceCustomScopeImpl implements Scope { ThreadLocal < Object > threadLocal = new ThreadLocal <> (); @Override public < T > Provider < T > scope ( Key < T > key , Provider < T > unscoped ) { return () -> { T instance = ( T ) threadLocal . get (); if ( instance == null ) { instance = unscoped . get (); threadLocal . set ( instance ); } return instance ; }; } } \u6211\u4eec\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7ebf\u7a0b\u62bd\u53d6Scope\uff0c\u6211\u4eec\u53ea\u662f\u4e3a\u4e86\u505a\u6d4b\u8bd5\u4f7f\u7528\uff0c\u5177\u4f53\u7684Scope\u8fd8\u9700\u8981\u6839\u636e\u4e1a\u52a1\u81ea\u5df1\u4f7f\u7528\u3002\u5f53\u6211\u4eec\u4f20\u9012\u7684\u7ebf\u7a0b\u4e2d\u6ca1\u6709\u6784\u9020\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u5148\u6784\u9020\u4e00\u4e2a\uff0c\u7136\u540e\u653e\u5165\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4ee5\u540e\u6bcf\u6b21\u90fd\u4ece\u7ebf\u7a0b\u4e2d\u83b7\u53d6\u5bf9\u8c61\u3002 \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceCustomScope**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Injector ; import org.junit.Test ; public class TestGuiceCustomScope { @Test public void test () { Injector injector = Guice . createInjector ( binder -> { binder . bind ( GuiceScopeService . class ). to ( GuiceScopeServiceImpl . class ). in ( new GuiceCustomScopeImpl ()); }); for ( int i = 0 ; i < 3 ; i ++ ) { System . out . println ( injector . getInstance ( GuiceScopeService . class ). hashCode ()); } } } \u8fd0\u884c\u7a0b\u5e8f\u540e\u6211\u4eec\u5f97\u5230\u4ee5\u4e0b\u7ed3\u679c\uff1a 508198356 508198356 508198356 \u6211\u4eec\u901a\u8fc7\u7ed3\u679c\u5f97\u5230\u8fd0\u884c\u4e863\u6b21\u540e\u7684\u5b9e\u4f8bhashCode\u662f\u4e00\u81f4\u7684\uff0c\u8fd9\u5c31\u8bf4\u660e\u6211\u4eec\u7684\u81ea\u5b9a\u4e49Scope\u5df2\u7ecf\u8d77\u4f5c\u7528\u4e86\u3002\u5982\u679c\u65b0\u7684\u5b9e\u4f8b\u6784\u5efa\u540e\u90a3\u4e48hashCode\u5c06\u4f1a\u88ab\u6539\u53d8\u3002 \u63a5\u4e0b\u6765\u5728 src/main/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.GuiceCustomScopeModule**\u7c7b\u6587\u4ef6\u7ed1\u5b9a\u81ea\u5b9a\u4e49Scope\u6ce8\u89e3\uff0c\u6211\u4eec\u901a\u8fc7\u5b9e\u73b0Module\u8fdb\u884c\u6ce8\u5165,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.AbstractModule ; import io.edurt.lc.guice.annotation.GuiceCustomScope ; public class GuiceCustomScopeModule extends AbstractModule { @Override protected void configure () { bindScope ( GuiceCustomScope . class , new GuiceCustomScopeImpl ()); } } \u9700\u8981\u4f7f\u7528\u5230\u6539Module\u53ea\u9700\u8981\u5728Guice.createInjector\u6784\u5efa\u7684\u65f6\u5019\u6dfb\u52a0\u8be5Module\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a Injector injector = Guice . createInjector ( new GuiceCustomScopeModule (), binder -> { binder . bind ( GuiceScopeService . class ). to ( GuiceScopeServiceImpl . class ). in ( new GuiceCustomScopeImpl ()); }); \u5728 ScopeService \u7c7b\u4e0a\u4f7f\u7528 @GuiceCustomScope \u6ce8\u89e3\u5373\u53ef\u3002 \u6e90\u7801\u5730\u5740 \u00b6 GitHub","title":"Guice\u4f9d\u8d56\u6ce8\u5165(Scope)"},{"location":"Google/Guice/2021-09-01-guice-binder-scope/#_1","text":"\u6280\u672f \u7248\u672c Java 1.8+ Guice 4.2.3","title":"\u57fa\u7840\u73af\u5883"},{"location":"Google/Guice/2021-09-01-guice-binder-scope/#_2","text":"\u521d\u59cb\u5316\u9879\u76ee mvn archetype:generate -DgroupId = io.edurt.lc.guice -DartifactId = guice-binder-scope -DarchetypeArtifactId = maven-archetype-quickstart -Dversion = 1 .0.0 -DinteractiveMode = false \u4fee\u6539pom.xml\u589e\u52a0Guice\u4f9d\u8d56 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <parent> <artifactId> lc-guice </artifactId> <groupId> io.edurt.lc.guice </groupId> <version> 1.0.0 </version> </parent> <modelVersion> 4.0.0 </modelVersion> <artifactId> guice-binder-scope </artifactId> <name> Learning Center for Guice Binder(Scope) </name> <properties> <maven.compiler.source> 1.8 </maven.compiler.source> <maven.compiler.target> 1.8 </maven.compiler.target> </properties> <dependencies> <dependency> <groupId> com.google.inject </groupId> <artifactId> guice </artifactId> <version> 4.2.3 </version> </dependency> <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> <scope> test </scope> </dependency> </dependencies> </project> guice : guice\u5c31\u662f\u6211\u4eec\u6838\u5fc3\u8981\u4f7f\u7528\u7684\u4f9d\u8d56","title":"\u521d\u59cb\u5316\u9879\u76ee"},{"location":"Google/Guice/2021-09-01-guice-binder-scope/#singleton","text":"Guice\u652f\u6301\u6211\u4eec\u5728\u5176\u4ed6DI\u6846\u67b6\u4e2d\u9010\u6e10\u4e60\u60ef\u7684 Scope \u548c Scope \u673a\u5236\u3002Guice\u9ed8\u8ba4\u63d0\u4f9b\u5df2\u5b9a\u4e49\u4f9d\u8d56\u9879\u7684\u65b0\u5b9e\u4f8b\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceScopeService**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public interface GuiceScopeService { void println ( String input ); } \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceScopeServiceImpl**\u7c7b\u6587\u4ef6,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 package io.edurt.lc.guice ; public class GuiceScopeServiceImpl implements GuiceScopeService { @Override public void println ( String input ) { System . out . println ( input ); } } \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceScope**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Injector ; import com.google.inject.Scopes ; import org.junit.Test ; public class TestGuiceScope { @Test public void test () { Injector injector = Guice . createInjector ( binder -> binder . bind ( GuiceScopeService . class ). to ( GuiceScopeServiceImpl . class ). in ( Scopes . SINGLETON )); GuiceScopeService service = injector . getInstance ( GuiceScopeService . class ); service . println ( \"Singleton Scope\" ); } } \u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\u8f93\u51fa Singleton Scope \u901a\u8fc7\u4ee3\u7801 binder.bind(GuiceScopeService.class).to(GuiceScopeServiceImpl.class).in(Scopes.SINGLETON) \u6211\u4eec\u6307\u5b9a\u4e86GuiceScopeService\u7684Scope\uff0c\u4ed6\u5c06\u4f1a\u88ab\u6807\u5fd7\u4e3a\u4e00\u4e2a\u5355\u4f8b\u5b9e\u4f8b\u3002\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 @Singleton \u6807\u5fd7\u8be5\u7c7b\u7684\u4f5c\u7528\u57df \u5728 src/test/java \u76ee\u5f55\u521b\u5efa**GuiceScopeServiceAutoImpl**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Singleton ; @Singleton public class GuiceScopeServiceAutoImpl implements GuiceScopeService { @Override public void println ( String input ) { System . out . println ( input ); } } \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceScopeAuto**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Injector ; import org.junit.Test ; public class TestGuiceScopeAuto { @Test public void test () { Injector injector = Guice . createInjector ( binder -> binder . bind ( GuiceScopeService . class ). to ( GuiceScopeServiceAutoImpl . class )); GuiceScopeService service = injector . getInstance ( GuiceScopeService . class ); service . println ( \"Singleton Auto Scope\" ); } } \u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\u8f93\u51fa Singleton Auto Scope \u4e24\u79cd\u65b9\u5f0f\u5b9e\u73b0\u7684\u6548\u679c\u90fd\u662f\u4e00\u81f4\u7684\u3002\u6b64\u65f6 GuiceScopeService \u4f1a\u88ab\u6784\u5efa\u4e3a\u5355\u4f8b\u5b9e\u4f8b\u3002 \u5f53\u7136\u8fd8\u6709\u4e00\u4e2a asEagerSingleton() \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u6765\u6807\u8bb0\u5355\u4f8b\u6a21\u5f0f\u3002 \u4ed6\u4eec\u7684\u5bf9\u6bd4\u56fe\u5982\u4e0b\uff1a \u4f7f\u7528\u65b9\u5f0f PRODUCTION DEVELOPMENT .asEagerSingleton() eager eager .in(Singleton.class) eager lazy .in(Scopes.SINGLETON) eager lazy @Singleton eager* lazy","title":"Singleton"},{"location":"Google/Guice/2021-09-01-guice-binder-scope/#scope","text":"Guice\u8fd8\u652f\u6301\u6211\u4eec\u7528\u6237\u81ea\u5b9a\u4e49\u4f5c\u7528\u57df\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u6211\u4eec\u4e0d\u9700\u8981\u81ea\u5df1\u5b9e\u73b0Scope\uff0c\u4e00\u822c\u5185\u7f6e\u7684\u4f5c\u7528\u57df\u5bf9\u4e8e\u5927\u591a\u6570\u7684\u5e94\u7528\u5df2\u7ecf\u8db3\u591f\u4e86\u3002\u5982\u679c\u60a8\u6b63\u5728\u7f16\u5199\u4e00\u4e2aweb\u5e94\u7528\u7a0b\u5e8f\uff0c\u90a3\u4e48 ServletModule \u4e3aHTTP\u8bf7\u6c42\u548cHTTP\u4f1a\u8bdd\u63d0\u4f9b\u4e86\u7b80\u5355\u7684\u3001\u826f\u597d\u4f5c\u7528\u57df\u5b9e\u73b0\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u60f3\u6cd5\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.annotation.GuiceCustomScope**\u7c7b\u6587\u4ef6,\u5b9e\u73b0\u81ea\u5b9a\u4e49Scope\u6ce8\u89e3,\u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 Scope\u6ce8\u89e3\u7528\u4e8e\u6807\u8bb0\u5f53\u524dScope\u5728\u5bb9\u5668\u4e2d\u4f7f\u7528\u7684\u4f5c\u7528\u57df\u3002\u5c06\u4f7f\u7528\u5b83\u6765\u6ce8\u91caguice\u6784\u9020\u7684\u7c7b\u578b\uff0c @Provides \u65b9\u6cd5\u548cbind\u8bed\u6cd5\u4e2d\u7684 in() package io.edurt.lc.guice.annotation ; import com.google.inject.ScopeAnnotation ; import java.lang.annotation.Retention ; import java.lang.annotation.Target ; import static java.lang.annotation.ElementType.METHOD ; import static java.lang.annotation.ElementType.TYPE ; import static java.lang.annotation.RetentionPolicy.RUNTIME ; @Target ({ TYPE , METHOD }) @Retention ( RUNTIME ) @ScopeAnnotation public @interface GuiceCustomScope { } \u5728\u4f7f\u7528\u81ea\u5b9a\u4e49Scope\u65f6\uff0c\u8bf7\u786e\u4fdd\u5bfc\u5165\u4e86\u6b63\u786e\u7684Scope\u6ce8\u89e3\u3002\u5426\u5219\uff0c\u60a8\u53ef\u80fd\u4f1a\u5f97\u5230\u4e00\u4e2a SCOPE_NOT_FOUND \u9519\u8bef\u3002 \u5728 src/main/java \u76ee\u5f55\u4e0b\u65b0\u5efa**io.edurt.lc.guice.GuiceCustomScopeImpl**\u7c7b\u6587\u4ef6, \u5728\u6587\u4ef6\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9 Scope\u63a5\u53e3\u786e\u4fdd\u6bcf\u4e2aScope\u5b9e\u4f8b\u62e5\u6709\u4e00\u5230\u591a\u4e2a\u7c7b\u578b\u5b9e\u4f8b\u3002 package io.edurt.lc.guice ; import com.google.inject.Key ; import com.google.inject.Provider ; import com.google.inject.Scope ; public class GuiceCustomScopeImpl implements Scope { ThreadLocal < Object > threadLocal = new ThreadLocal <> (); @Override public < T > Provider < T > scope ( Key < T > key , Provider < T > unscoped ) { return () -> { T instance = ( T ) threadLocal . get (); if ( instance == null ) { instance = unscoped . get (); threadLocal . set ( instance ); } return instance ; }; } } \u6211\u4eec\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7ebf\u7a0b\u62bd\u53d6Scope\uff0c\u6211\u4eec\u53ea\u662f\u4e3a\u4e86\u505a\u6d4b\u8bd5\u4f7f\u7528\uff0c\u5177\u4f53\u7684Scope\u8fd8\u9700\u8981\u6839\u636e\u4e1a\u52a1\u81ea\u5df1\u4f7f\u7528\u3002\u5f53\u6211\u4eec\u4f20\u9012\u7684\u7ebf\u7a0b\u4e2d\u6ca1\u6709\u6784\u9020\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u5148\u6784\u9020\u4e00\u4e2a\uff0c\u7136\u540e\u653e\u5165\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4ee5\u540e\u6bcf\u6b21\u90fd\u4ece\u7ebf\u7a0b\u4e2d\u83b7\u53d6\u5bf9\u8c61\u3002 \u63a5\u4e0b\u6765\u5728 src/test/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.TestGuiceCustomScope**\u7c7b\u6587\u4ef6\u8fdb\u884c\u5b9a\u4e49\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.Guice ; import com.google.inject.Injector ; import org.junit.Test ; public class TestGuiceCustomScope { @Test public void test () { Injector injector = Guice . createInjector ( binder -> { binder . bind ( GuiceScopeService . class ). to ( GuiceScopeServiceImpl . class ). in ( new GuiceCustomScopeImpl ()); }); for ( int i = 0 ; i < 3 ; i ++ ) { System . out . println ( injector . getInstance ( GuiceScopeService . class ). hashCode ()); } } } \u8fd0\u884c\u7a0b\u5e8f\u540e\u6211\u4eec\u5f97\u5230\u4ee5\u4e0b\u7ed3\u679c\uff1a 508198356 508198356 508198356 \u6211\u4eec\u901a\u8fc7\u7ed3\u679c\u5f97\u5230\u8fd0\u884c\u4e863\u6b21\u540e\u7684\u5b9e\u4f8bhashCode\u662f\u4e00\u81f4\u7684\uff0c\u8fd9\u5c31\u8bf4\u660e\u6211\u4eec\u7684\u81ea\u5b9a\u4e49Scope\u5df2\u7ecf\u8d77\u4f5c\u7528\u4e86\u3002\u5982\u679c\u65b0\u7684\u5b9e\u4f8b\u6784\u5efa\u540e\u90a3\u4e48hashCode\u5c06\u4f1a\u88ab\u6539\u53d8\u3002 \u63a5\u4e0b\u6765\u5728 src/main/java \u76ee\u5f55\u521b\u5efa**io.edurt.lc.guice.GuiceCustomScopeModule**\u7c7b\u6587\u4ef6\u7ed1\u5b9a\u81ea\u5b9a\u4e49Scope\u6ce8\u89e3\uff0c\u6211\u4eec\u901a\u8fc7\u5b9e\u73b0Module\u8fdb\u884c\u6ce8\u5165,\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801 package io.edurt.lc.guice ; import com.google.inject.AbstractModule ; import io.edurt.lc.guice.annotation.GuiceCustomScope ; public class GuiceCustomScopeModule extends AbstractModule { @Override protected void configure () { bindScope ( GuiceCustomScope . class , new GuiceCustomScopeImpl ()); } } \u9700\u8981\u4f7f\u7528\u5230\u6539Module\u53ea\u9700\u8981\u5728Guice.createInjector\u6784\u5efa\u7684\u65f6\u5019\u6dfb\u52a0\u8be5Module\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a Injector injector = Guice . createInjector ( new GuiceCustomScopeModule (), binder -> { binder . bind ( GuiceScopeService . class ). to ( GuiceScopeServiceImpl . class ). in ( new GuiceCustomScopeImpl ()); }); \u5728 ScopeService \u7c7b\u4e0a\u4f7f\u7528 @GuiceCustomScope \u6ce8\u89e3\u5373\u53ef\u3002","title":"\u81ea\u5b9a\u4e49Scope"},{"location":"Google/Guice/2021-09-01-guice-binder-scope/#_3","text":"GitHub","title":"\u6e90\u7801\u5730\u5740"}]}